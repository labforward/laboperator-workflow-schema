{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "Workflow Event Schema",
    "description": "A modification event done during a workflow execution.",
    "type": "object",
    "required": [
        "type",
        "payload"
    ],
    "oneOf": [
        {
            "$ref": "#/definitions/workflow-event/add-step"
        },
        {
            "$ref": "#/definitions/workflow-event/move-step"
        },
        {
            "$ref": "#/definitions/workflow-event/remove-step"
        },
        {
            "$ref": "#/definitions/workflow-event/resolve-if"
        },
        {
            "$ref": "#/definitions/workflow-event/resolve-until"
        },
        {
            "$ref": "#/definitions/workflow-event/resolve-while"
        },
        {
            "$ref": "#/definitions/workflow-event/resolve-for-each"
        }
    ],
    "definitions": {
        "schemaArray": {
            "type": "array",
            "minItems": 1,
            "items": {
                "$ref": "#/definitions/jsonSchemaDraft7"
            }
        },
        "nonNegativeInteger": {
            "type": "integer",
            "minimum": 0
        },
        "nonNegativeIntegerDefault0": {
            "allOf": [
                {
                    "$ref": "#/definitions/nonNegativeInteger"
                },
                {
                    "default": 0
                }
            ]
        },
        "simpleTypes": {
            "enum": [
                "array",
                "boolean",
                "integer",
                "null",
                "number",
                "object",
                "string"
            ]
        },
        "stringArray": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "uniqueItems": true,
            "default": []
        },
        "jsonSchemaDraft7": {
            "$schema": "http://json-schema.org/draft-07/schema#",
            "title": "Core schema meta-schema",
            "type": [
                "object",
                "boolean"
            ],
            "properties": {
                "$id": {
                    "type": "string",
                    "format": "uri-reference"
                },
                "$schema": {
                    "type": "string",
                    "format": "uri"
                },
                "$ref": {
                    "type": "string",
                    "format": "uri-reference"
                },
                "$comment": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "default": true,
                "readOnly": {
                    "type": "boolean",
                    "default": false
                },
                "examples": {
                    "type": "array",
                    "items": true
                },
                "multipleOf": {
                    "type": "number",
                    "exclusiveMinimum": 0
                },
                "maximum": {
                    "type": "number"
                },
                "exclusiveMaximum": {
                    "type": "number"
                },
                "minimum": {
                    "type": "number"
                },
                "exclusiveMinimum": {
                    "type": "number"
                },
                "maxLength": {
                    "$ref": "#/definitions/nonNegativeInteger"
                },
                "minLength": {
                    "$ref": "#/definitions/nonNegativeIntegerDefault0"
                },
                "pattern": {
                    "type": "string",
                    "format": "regex"
                },
                "additionalItems": {
                    "$ref": "#/definitions/jsonSchemaDraft7"
                },
                "items": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/jsonSchemaDraft7"
                        },
                        {
                            "$ref": "#/definitions/schemaArray"
                        }
                    ],
                    "default": true
                },
                "maxItems": {
                    "$ref": "#/definitions/nonNegativeInteger"
                },
                "minItems": {
                    "$ref": "#/definitions/nonNegativeIntegerDefault0"
                },
                "uniqueItems": {
                    "type": "boolean",
                    "default": false
                },
                "contains": {
                    "$ref": "#/definitions/jsonSchemaDraft7"
                },
                "maxProperties": {
                    "$ref": "#/definitions/nonNegativeInteger"
                },
                "minProperties": {
                    "$ref": "#/definitions/nonNegativeIntegerDefault0"
                },
                "required": {
                    "$ref": "#/definitions/stringArray"
                },
                "additionalProperties": {
                    "$ref": "#/definitions/jsonSchemaDraft7"
                },
                "definitions": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/jsonSchemaDraft7"
                    },
                    "default": {}
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/jsonSchemaDraft7"
                    },
                    "default": {}
                },
                "patternProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/jsonSchemaDraft7"
                    },
                    "propertyNames": {
                        "format": "regex"
                    },
                    "default": {}
                },
                "dependencies": {
                    "type": "object",
                    "additionalProperties": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/jsonSchemaDraft7"
                            },
                            {
                                "$ref": "#/definitions/stringArray"
                            }
                        ]
                    }
                },
                "propertyNames": {
                    "$ref": "#/definitions/jsonSchemaDraft7"
                },
                "const": true,
                "enum": {
                    "type": "array",
                    "items": true,
                    "minItems": 1,
                    "uniqueItems": true
                },
                "type": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/simpleTypes"
                        },
                        {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/simpleTypes"
                            },
                            "minItems": 1,
                            "uniqueItems": true
                        }
                    ]
                },
                "format": {
                    "type": "string"
                },
                "contentMediaType": {
                    "type": "string"
                },
                "contentEncoding": {
                    "type": "string"
                },
                "if": {
                    "$ref": "#/definitions/jsonSchemaDraft7"
                },
                "then": {
                    "$ref": "#/definitions/jsonSchemaDraft7"
                },
                "else": {
                    "$ref": "#/definitions/jsonSchemaDraft7"
                },
                "allOf": {
                    "$ref": "#/definitions/schemaArray"
                },
                "anyOf": {
                    "$ref": "#/definitions/schemaArray"
                },
                "oneOf": {
                    "$ref": "#/definitions/schemaArray"
                },
                "not": {
                    "$ref": "#/definitions/jsonSchemaDraft7"
                }
            },
            "default": true
        },
        "workflow-event": {
            "add-step": {
                "type": "object",
                "title": "AddStep Event",
                "description": "The event of adding a step to a running dynamic template.\nThe added step will be appended as the last step of the run.\n",
                "properties": {
                    "type": {
                        "enum": [
                            "add_step"
                        ]
                    },
                    "payload": {
                        "oneOf": [
                            {
                                "type": "object",
                                "description": "Payload for externally defined step template",
                                "required": [
                                    "uuid",
                                    "version"
                                ],
                                "properties": {
                                    "uuid": {
                                        "$ref": "#/definitions/uuid"
                                    },
                                    "version": {
                                        "$ref": "#/definitions/version"
                                    }
                                },
                                "markdownDescription": "Payload for externally defined step template\n\nSee more: [Add Step Schema](https://schema.laboperator.com/schemas/definitions/workflow-event/add-step) "
                            },
                            {
                                "type": "object",
                                "description": "Payload of locally defined step template",
                                "required": [
                                    "step"
                                ],
                                "properties": {
                                    "step": {
                                        "$ref": "#/definitions/member-name"
                                    }
                                },
                                "markdownDescription": "Payload of locally defined step template\n\nSee more: [Add Step Schema](https://schema.laboperator.com/schemas/definitions/workflow-event/add-step) "
                            }
                        ]
                    }
                },
                "markdownDescription": "The event of adding a step to a running dynamic template.\nThe added step will be appended as the last step of the run.\n\n\nSee more: [Add Step Schema](https://schema.laboperator.com/schemas/definitions/workflow-event/add-step) "
            },
            "move-step": {
                "type": "object",
                "title": "MoveStep Event",
                "description": "The event of moving a step in a running dynamic template.\nOnly steps which are not yet started can be moved.\n",
                "properties": {
                    "type": {
                        "enum": [
                            "move_step"
                        ]
                    },
                    "payload": {
                        "type": "object",
                        "required": [
                            "from",
                            "to"
                        ],
                        "properties": {
                            "from": {
                                "type": "string",
                                "pattern": "^/flow/"
                            },
                            "to": {
                                "type": "string",
                                "pattern": "^/flow/"
                            }
                        }
                    }
                },
                "markdownDescription": "The event of moving a step in a running dynamic template.\nOnly steps which are not yet started can be moved.\n\n\nSee more: [Move Step Schema](https://schema.laboperator.com/schemas/definitions/workflow-event/move-step) "
            },
            "remove-step": {
                "type": "object",
                "title": "RemoveStep Event",
                "description": "The event of removing a step from a running dynamic template.\nOnly steps which are not yet started can be removed\n",
                "properties": {
                    "type": {
                        "enum": [
                            "remove_step"
                        ]
                    },
                    "payload": {
                        "type": "object",
                        "required": [
                            "pointer"
                        ],
                        "properties": {
                            "pointer": {
                                "type": "string",
                                "pattern": "^/flow/"
                            }
                        }
                    }
                },
                "markdownDescription": "The event of removing a step from a running dynamic template.\nOnly steps which are not yet started can be removed\n\n\nSee more: [Remove Step Schema](https://schema.laboperator.com/schemas/definitions/workflow-event/remove-step) "
            },
            "resolve-if": {
                "type": "object",
                "title": "ResolveIf Event",
                "description": "The event of resolving the condition in an `if` flow of steps.\n\nIf the condition resolves to a truthy value, the steps included in `then` will be unfolded.\nOtherwise, the steps included in `else` will be unfolded.\n\nIf `else` is not specified in the `if` flow and the condition resolves to a falsy value,\nno steps will be unfolded.\n",
                "properties": {
                    "type": {
                        "enum": [
                            "resolve_if"
                        ]
                    },
                    "payload": {
                        "type": "object",
                        "required": [
                            "pointer",
                            "resolved"
                        ],
                        "properties": {
                            "pointer": {
                                "type": "string",
                                "pattern": "^/flow/"
                            },
                            "resolved": {
                                "type": "boolean"
                            }
                        }
                    }
                },
                "markdownDescription": "The event of resolving the condition in an `if` flow of steps.\n\nIf the condition resolves to a truthy value, the steps included in `then` will be unfolded.\nOtherwise, the steps included in `else` will be unfolded.\n\nIf `else` is not specified in the `if` flow and the condition resolves to a falsy value,\nno steps will be unfolded.\n\n\nSee more: [Resolve If Schema](https://schema.laboperator.com/schemas/definitions/workflow-event/resolve-if) "
            },
            "resolve-until": {
                "type": "object",
                "title": "ResolveUntil Event",
                "description": "The event of resolving the condition in a `loop-until` flow of steps.\n\nIf the condition in `until` resolves to a falsy value, the steps included in `loop` will be unfolded.\nOtherwise, the execution will break out of the `loop-until` flow and continue to evaluate the next entry in the parent flow.\n",
                "properties": {
                    "type": {
                        "enum": [
                            "resolve_until"
                        ]
                    },
                    "payload": {
                        "type": "object",
                        "required": [
                            "pointer",
                            "resolved"
                        ],
                        "properties": {
                            "pointer": {
                                "type": "string",
                                "pattern": "^/flow/"
                            },
                            "resolved": {
                                "type": "boolean"
                            }
                        }
                    }
                },
                "markdownDescription": "The event of resolving the condition in a `loop-until` flow of steps.\n\nIf the condition in `until` resolves to a falsy value, the steps included in `loop` will be unfolded.\nOtherwise, the execution will break out of the `loop-until` flow and continue to evaluate the next entry in the parent flow.\n\n\nSee more: [Resolve Until Schema](https://schema.laboperator.com/schemas/definitions/workflow-event/resolve-until) "
            },
            "resolve-while": {
                "type": "object",
                "title": "ResolveWhile Event",
                "description": "The event of resolving the condition in a `while` flow of steps.\n\nIf the condition in `while` resolves to a truthy value, the steps included in `do` will be unfolded.\nOtherwise, the execution will break out of the `while` flow and continue to evaluate the next entry in the parent flow.\n",
                "properties": {
                    "type": {
                        "enum": [
                            "resolve_while"
                        ]
                    },
                    "payload": {
                        "type": "object",
                        "required": [
                            "pointer",
                            "resolved"
                        ],
                        "properties": {
                            "pointer": {
                                "type": "string",
                                "pattern": "^/flow/"
                            },
                            "resolved": {
                                "type": "boolean"
                            }
                        }
                    }
                },
                "markdownDescription": "The event of resolving the condition in a `while` flow of steps.\n\nIf the condition in `while` resolves to a truthy value, the steps included in `do` will be unfolded.\nOtherwise, the execution will break out of the `while` flow and continue to evaluate the next entry in the parent flow.\n\n\nSee more: [Resolve While Schema](https://schema.laboperator.com/schemas/definitions/workflow-event/resolve-while) "
            },
            "resolve-for-each": {
                "type": "object",
                "title": "ResolveForEach Event",
                "description": "The event of resolving a single iteration of `for-each` flow of steps.\n\nThe iteration will continue up to and including the last item in the source array.\n",
                "properties": {
                    "type": {
                        "enum": [
                            "resolve_for_each"
                        ]
                    },
                    "payload": {
                        "type": "object",
                        "required": [
                            "pointer",
                            "iterator"
                        ],
                        "properties": {
                            "pointer": {
                                "type": "string",
                                "pattern": "^/flow/"
                            },
                            "iterator": {
                                "type": "integer"
                            }
                        }
                    }
                },
                "markdownDescription": "The event of resolving a single iteration of `for-each` flow of steps.\n\nThe iteration will continue up to and including the last item in the source array.\n\n\nSee more: [Resolve For Each Schema](https://schema.laboperator.com/schemas/definitions/workflow-event/resolve-for-each) "
            }
        },
        "uuid": {
            "type": "string",
            "title": "UUID",
            "description": "An RFC4122 compliant UUID.\n",
            "pattern": "([a-f0-9]{8}-?[a-f0-9]{4}-?[1-5][a-f0-9]{3}-?[89ab][a-f0-9]{3}-?[a-f0-9]{12}){1}",
            "examples": [
                "645afc8c-a553-4657-a0da-d93cb98d158b"
            ],
            "markdownDescription": "An RFC4122 compliant UUID.\n\n\nSee more: [Uuid Schema](https://schema.laboperator.com/schemas/definitions/uuid) "
        },
        "version": {
            "type": "string",
            "title": "Version",
            "description": "A version that is a valid version tag according to the\n[Semantic Versioning 2.0.0](https://semver.org) Specification. We\nencourage you to follow the SemVer guidelines:\n\nGiven a version number MAJOR.MINOR.PATCH, increment the:\n\n1. MAJOR version when you make incompatible API changes,\n2. MINOR version when you add functionality in a backwards-compatible\n   manner, and\n3. PATCH version when you make backwards-compatible bug fixes.\n",
            "default": "1.0.0",
            "examples": [
                "1.0.0"
            ],
            "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(-(0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(\\.(0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\\+[0-9a-zA-Z-]+(\\.[0-9a-zA-Z-]+)*)?$",
            "markdownDescription": "A version that is a valid version tag according to the\n[Semantic Versioning 2.0.0](https://semver.org) Specification. We\nencourage you to follow the SemVer guidelines:\n\nGiven a version number MAJOR.MINOR.PATCH, increment the:\n\n1. MAJOR version when you make incompatible API changes,\n2. MINOR version when you add functionality in a backwards-compatible\n   manner, and\n3. PATCH version when you make backwards-compatible bug fixes.\n\n\nSee more: [Version Schema](https://schema.laboperator.com/schemas/definitions/version) "
        },
        "member-name": {
            "type": "string",
            "title": "Member Name",
            "description": "A member name that is used as a reference elsewhere.\nAllowed characters are lower \"a\" to \"z\", capital \"A\" to \"Z\", \"0\" to \"9\" and\n\"-\" , \"_\". We recommend to consistently use either lowerCamelCase or\nkebab-case. While snake_case is allowed, it has a chance of name collisions\nwith internal values.\n",
            "minLength": 3,
            "maxLength": 60,
            "pattern": "(?=^.{3,60}$)(^[a-zA-Z0-9]+(?:[-_]?[a-zA-Z0-9]+)*$)",
            "not": {
                "enum": [
                    "command_response",
                    "data_point",
                    "do",
                    "else",
                    "flow",
                    "if",
                    "INTERNAL_STATE",
                    "loop",
                    "parallel",
                    "step",
                    "substep",
                    "type",
                    "until",
                    "when",
                    "while",
                    "workflow"
                ]
            },
            "examples": [
                "myField",
                "my-field",
                "transportSampleToShaker",
                "transport_sample_to_shaker"
            ],
            "markdownDescription": "A member name that is used as a reference elsewhere.\nAllowed characters are lower \"a\" to \"z\", capital \"A\" to \"Z\", \"0\" to \"9\" and\n\"-\" , \"_\". We recommend to consistently use either lowerCamelCase or\nkebab-case. While snake_case is allowed, it has a chance of name collisions\nwith internal values.\n\n\nSee more: [Member Name Schema](https://schema.laboperator.com/schemas/definitions/member-name) "
        }
    }
}
