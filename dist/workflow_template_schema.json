{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "/laboperator/workflow_template_schema/1.0.1",
    "type": "object",
    "title": "Workflow Template Schema",
    "description": "A workflow template consists of one or multiple steps to orchestrate devices and data with information and control elements.\n",
    "required": [
        "schema_version",
        "info",
        "steps",
        "flow"
    ],
    "properties": {
        "schema_version": {
            "$ref": "#/definitions/schemaVersion"
        },
        "info": {
            "$ref": "#/definitions/info"
        },
        "config": {
            "$ref": "#/definitions/config/workflowConfig"
        },
        "elements": {
            "type": "array",
            "description": "Data elements allow to display data from device channels.\n",
            "items": {
                "$ref": "#/definitions/step/element"
            }
        },
        "tables": {
            "$ref": "#/definitions/step/tables"
        },
        "buttons": {
            "$ref": "#/definitions/buttons"
        },
        "fields": {
            "$ref": "#/definitions/fields"
        },
        "steps": {
            "$ref": "#/definitions/workflow_template/steps"
        },
        "flow": {
            "$ref": "#/definitions/workflow_template/flow"
        },
        "contextInfo": {
            "$ref": "#/definitions/contextInfo"
        },
        "behaviors": {
            "$ref": "#/definitions/workflow_template/behaviors"
        },
        "secrets": {
            "$ref": "#/definitions/secrets"
        }
    },
    "definitions": {
        "schemaArray": {
            "type": "array",
            "minItems": 1,
            "items": {
                "$ref": "#/definitions/jsonSchemaDraft7"
            }
        },
        "nonNegativeInteger": {
            "type": "integer",
            "minimum": 0
        },
        "nonNegativeIntegerDefault0": {
            "allOf": [
                {
                    "$ref": "#/definitions/nonNegativeInteger"
                },
                {
                    "default": 0
                }
            ]
        },
        "simpleTypes": {
            "enum": [
                "array",
                "boolean",
                "integer",
                "null",
                "number",
                "object",
                "string"
            ]
        },
        "stringArray": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "uniqueItems": true,
            "default": []
        },
        "jsonSchemaDraft7": {
            "$schema": "http://json-schema.org/draft-07/schema#",
            "title": "Core schema meta-schema",
            "type": [
                "object",
                "boolean"
            ],
            "properties": {
                "$id": {
                    "type": "string",
                    "format": "uri-reference"
                },
                "$schema": {
                    "type": "string",
                    "format": "uri"
                },
                "$ref": {
                    "type": "string",
                    "format": "uri-reference"
                },
                "$comment": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "default": true,
                "readOnly": {
                    "type": "boolean",
                    "default": false
                },
                "examples": {
                    "type": "array",
                    "items": true
                },
                "multipleOf": {
                    "type": "number",
                    "exclusiveMinimum": 0
                },
                "maximum": {
                    "type": "number"
                },
                "exclusiveMaximum": {
                    "type": "number"
                },
                "minimum": {
                    "type": "number"
                },
                "exclusiveMinimum": {
                    "type": "number"
                },
                "maxLength": {
                    "$ref": "#/definitions/nonNegativeInteger"
                },
                "minLength": {
                    "$ref": "#/definitions/nonNegativeIntegerDefault0"
                },
                "pattern": {
                    "type": "string",
                    "format": "regex"
                },
                "additionalItems": {
                    "$ref": "#/definitions/jsonSchemaDraft7"
                },
                "items": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/jsonSchemaDraft7"
                        },
                        {
                            "$ref": "#/definitions/schemaArray"
                        }
                    ],
                    "default": true
                },
                "maxItems": {
                    "$ref": "#/definitions/nonNegativeInteger"
                },
                "minItems": {
                    "$ref": "#/definitions/nonNegativeIntegerDefault0"
                },
                "uniqueItems": {
                    "type": "boolean",
                    "default": false
                },
                "contains": {
                    "$ref": "#/definitions/jsonSchemaDraft7"
                },
                "maxProperties": {
                    "$ref": "#/definitions/nonNegativeInteger"
                },
                "minProperties": {
                    "$ref": "#/definitions/nonNegativeIntegerDefault0"
                },
                "required": {
                    "$ref": "#/definitions/stringArray"
                },
                "additionalProperties": {
                    "$ref": "#/definitions/jsonSchemaDraft7"
                },
                "definitions": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/jsonSchemaDraft7"
                    },
                    "default": {}
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/jsonSchemaDraft7"
                    },
                    "default": {}
                },
                "patternProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/jsonSchemaDraft7"
                    },
                    "propertyNames": {
                        "format": "regex"
                    },
                    "default": {}
                },
                "dependencies": {
                    "type": "object",
                    "additionalProperties": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/jsonSchemaDraft7"
                            },
                            {
                                "$ref": "#/definitions/stringArray"
                            }
                        ]
                    }
                },
                "propertyNames": {
                    "$ref": "#/definitions/jsonSchemaDraft7"
                },
                "const": true,
                "enum": {
                    "type": "array",
                    "items": true,
                    "minItems": 1,
                    "uniqueItems": true
                },
                "type": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/simpleTypes"
                        },
                        {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/simpleTypes"
                            },
                            "minItems": 1,
                            "uniqueItems": true
                        }
                    ]
                },
                "format": {
                    "type": "string"
                },
                "contentMediaType": {
                    "type": "string"
                },
                "contentEncoding": {
                    "type": "string"
                },
                "if": {
                    "$ref": "#/definitions/jsonSchemaDraft7"
                },
                "then": {
                    "$ref": "#/definitions/jsonSchemaDraft7"
                },
                "else": {
                    "$ref": "#/definitions/jsonSchemaDraft7"
                },
                "allOf": {
                    "$ref": "#/definitions/schemaArray"
                },
                "anyOf": {
                    "$ref": "#/definitions/schemaArray"
                },
                "oneOf": {
                    "$ref": "#/definitions/schemaArray"
                },
                "not": {
                    "$ref": "#/definitions/jsonSchemaDraft7"
                }
            },
            "default": true
        },
        "author": {
            "oneOf": [
                {
                    "type": "object",
                    "title": "Author with Email",
                    "description": "An author object with name and email.",
                    "required": [
                        "name",
                        "email"
                    ],
                    "properties": {
                        "name": {
                            "type": "string",
                            "title": "Name",
                            "examples": [
                                "Max Mustermann"
                            ]
                        },
                        "email": {
                            "type": "string",
                            "format": "email",
                            "title": "Email",
                            "examples": [
                                "max.mustermann@company.com"
                            ]
                        }
                    },
                    "markdownDescription": "An author object with name and email.\n\nSee more: [Author Schema](https://schema.laboperator.com/schemas/definitions/author) "
                },
                {
                    "type": "string",
                    "title": "Author",
                    "description": "Simple string to display as author information.",
                    "markdownDescription": "Simple string to display as author information.\n\nSee more: [Author Schema](https://schema.laboperator.com/schemas/definitions/author) "
                }
            ]
        },
        "button": {
            "type": "object",
            "required": [
                "key",
                "label"
            ],
            "properties": {
                "label": {
                    "description": "The displayed label of the button.\n",
                    "type": "string",
                    "markdownDescription": "The displayed label of the button.\n\n\nSee more: [Button Schema](https://schema.laboperator.com/schemas/definitions/button) "
                },
                "color": {
                    "description": "The color of the button. The value must be an accepted CSS color keyword or defined via the rgb() or hsl() functional notations. The organization theme colors can be referenced with `primary` and `secondary`. The color may also include an alpha-channel transparency value.\n",
                    "type": "string",
                    "default": "primary",
                    "examples": [
                        "secondary",
                        "hotpink",
                        "#FF69B4",
                        "rgb(100%, 41%, 71%)",
                        "hsl(330, 100%, 71%)"
                    ],
                    "markdownDescription": "The color of the button. The value must be an accepted CSS color keyword or defined via the rgb() or hsl() functional notations. The organization theme colors can be referenced with `primary` and `secondary`. The color may also include an alpha-channel transparency value.\n\n\nSee more: [Button Schema](https://schema.laboperator.com/schemas/definitions/button) "
                },
                "variant": {
                    "description": "The button variant. Contained buttons are high-emphasis, distinguished by their use of elevation and fill. They contain actions that are primary to their context. Outlined buttons are medium-emphasis buttons. Text buttons are typically used for less-pronounced actions.\n",
                    "type": "string",
                    "enum": [
                        "contained",
                        "outlined",
                        "text"
                    ],
                    "default": "contained",
                    "markdownDescription": "The button variant. Contained buttons are high-emphasis, distinguished by their use of elevation and fill. They contain actions that are primary to their context. Outlined buttons are medium-emphasis buttons. Text buttons are typically used for less-pronounced actions.\n\n\nSee more: [Button Schema](https://schema.laboperator.com/schemas/definitions/button) "
                },
                "key": {
                    "$ref": "#/definitions/memberName",
                    "description": "A unique reference passed to a manual trigger that can be used in a `behaviors` definition to react to this button being clicked.\n\nThe `key` can be used as a button `id` if it is unique in the current context and `id` is not defined. For example, use the `key` to display the button inside markdown in the format `{{button|my-key}}`.\n",
                    "markdownDescription": "A unique reference passed to a manual trigger that can be used in a `behaviors` definition to react to this button being clicked.\n\nThe `key` can be used as a button `id` if it is unique in the current context and `id` is not defined. For example, use the `key` to display the button inside markdown in the format `{{button|my-key}}`.\n\n\nSee more: [Button Schema](https://schema.laboperator.com/schemas/definitions/button) "
                },
                "id": {
                    "$ref": "#/definitions/memberName",
                    "description": "Can be used to render the button inside markdown text. For example, when `id` is defined as `print`, the text may look like:\n\n```yml\nUse this view to print the weight {{button|print}}.\n```\n",
                    "markdownDescription": "Can be used to render the button inside markdown text. For example, when `id` is defined as `print`, the text may look like:\n\n```\nUse this view to print the weight {{button|print}}.\n```\n\n\nSee more: [Button Schema](https://schema.laboperator.com/schemas/definitions/button) "
                },
                "placement": {
                    "description": "Buttons defined globally or at the step level of the template always have to be placed manually. Their `placement` setting is always considered to be `manual`.\n\nSubstep buttons with a setting of `default` will be automatically displayed at the very bottom of a substep in the order in which they are defined. When set to `manual`, a substep button has to be referenced inside the `description` markdown to be displayed.\n",
                    "type": "string",
                    "enum": [
                        "manual",
                        "default"
                    ],
                    "default": "default",
                    "markdownDescription": "Buttons defined globally or at the step level of the template always have to be placed manually. Their `placement` setting is always considered to be `manual`.\n\nSubstep buttons with a setting of `default` will be automatically displayed at the very bottom of a substep in the order in which they are defined. When set to `manual`, a substep button has to be referenced inside the `description` markdown to be displayed.\n\n\nSee more: [Button Schema](https://schema.laboperator.com/schemas/definitions/button) "
                }
            }
        },
        "buttons": {
            "type": "array",
            "title": "Buttons",
            "description": "Buttons allow users to trigger actions with a single tap.\n\nButtons defined at the workflow or step level can be used anywhere in the workflow or step respectively. Use its unique `key` or `id` value to reference a button inside markdown:\n\n`{{button|member-name}}`\n\nWhen defined at the substep level of a template, buttons automatically appear at the very bottom of the substep in the order in which they are defined. To manually place a substep button in the above shown format its `placement` setting must be set to `manual`.\n",
            "items": {
                "$ref": "#/definitions/button"
            },
            "markdownDescription": "Buttons allow users to trigger actions with a single tap.\n\nButtons defined at the workflow or step level can be used anywhere in the workflow or step respectively. Use its unique `key` or `id` value to reference a button inside markdown:\n\n`{{button|member-name}}`\n\nWhen defined at the substep level of a template, buttons automatically appear at the very bottom of the substep in the order in which they are defined. To manually place a substep button in the above shown format its `placement` setting must be set to `manual`.\n\n\nSee more: [Buttons Schema](https://schema.laboperator.com/schemas/definitions/buttons) "
        },
        "contextInfo": {
            "type": "object",
            "title": "Context information of a workflow or a step",
            "description": "Used to display contextual information related to the workflow or step.\n\nGlobal contextual information is defined in a workflow template and displayed\nin all steps.\n\nLocal contextual information is defined in a step template, or within a step\nin a workflow template, and displayed only during that specific step.\n",
            "properties": {
                "pages": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/context_info/contextInfoPage"
                    }
                }
            },
            "markdownDescription": "Used to display contextual information related to the workflow or step.\n\nGlobal contextual information is defined in a workflow template and displayed\nin all steps.\n\nLocal contextual information is defined in a step template, or within a step\nin a workflow template, and displayed only during that specific step.\n\n\nSee more: [Context Info Schema](https://schema.laboperator.com/schemas/definitions/contextInfo) "
        },
        "duration": {
            "title": "Duration",
            "description": "An duration string parsable by [Chronic Duration](https://github.com/henrypoydar/chronic_duration).\n",
            "type": "string",
            "examples": [
                "12.4 secs",
                "1:20",
                "1:20.51",
                "4:01:01",
                "3 mins 4 sec",
                "2 hrs 20 min",
                "2h20min",
                "two hours and twenty minutes"
            ],
            "markdownDescription": "An duration string parsable by [Chronic Duration](https://github.com/henrypoydar/chronic_duration).\n\n\nSee more: [Duration Schema](https://schema.laboperator.com/schemas/definitions/duration) "
        },
        "dynamicMemberName": {
            "type": "string",
            "title": "Dynamic member name",
            "description": "Dynamic member names allow to use field values for composing names in the field mapping.\n",
            "minLength": 3,
            "maxLength": 120,
            "pattern": "^(?![-_])([a-zA-Z0-9])*(([-_]?\\{\\{([a-zA-Z0-9]+(?:[-_]?[a-zA-Z0-9]+)*)\\}\\})*|(?:[-_]?[a-zA-Z0-9]+))*$",
            "examples": [
                "myField{{anotherField}}",
                "{{another-field}}-device"
            ],
            "markdownDescription": "Dynamic member names allow to use field values for composing names in the field mapping.\n\n\nSee more: [Dynamic Member Name Schema](https://schema.laboperator.com/schemas/definitions/dynamicMemberName) "
        },
        "field": {
            "title": "Field",
            "description": "A valid field schema is either a valid JSON schema as per [Draft 7](http://json-schema.org/draft-07/schema#) or one of our custom field types. Some additional properties are allowed at the top level.\n",
            "allOf": [
                {
                    "type": "object",
                    "required": [
                        "type"
                    ],
                    "properties": {
                        "ui:widget": {
                            "type": "string",
                            "enum": [
                                "checkbox",
                                "switch",
                                "textarea"
                            ],
                            "description": "A flag indicating the widget variant for fields of type `string` or `boolean`.\n\nBoolean fields can be displayed as either a checkbox or a switch to toggle between a binary state. The default appearance is a checkbox.\nFields of type `string` can be configured as a textarea element, which allows for multi-line text. The default appearance is a single-line input.\n\nIf a field type does not support a certain `ui:widget`, the setting is ignored.\n",
                            "markdownDescription": "A flag indicating the widget variant for fields of type `string` or `boolean`.\n\nBoolean fields can be displayed as either a checkbox or a switch to toggle between a binary state. The default appearance is a checkbox.\nFields of type `string` can be configured as a textarea element, which allows for multi-line text. The default appearance is a single-line input.\n\nIf a field type does not support a certain `ui:widget`, the setting is ignored.\n\n\nSee more: [Field Schema](https://schema.laboperator.com/schemas/definitions/field) "
                        },
                        "ui:options": {
                            "type": "object",
                            "description": "Display configuration options for certain field types and widget settings. If a field or widget does not support `ui:options`, the setting is ignored.\n",
                            "properties": {
                                "label": {
                                    "type": "boolean",
                                    "default": true,
                                    "description": "A flag indicating whether a field of type `boolean` has a display label. Setting this to `false` will display either only a checkbox or switch control element, without any visible label.\n",
                                    "markdownDescription": "A flag indicating whether a field of type `boolean` has a display label. Setting this to `false` will display either only a checkbox or switch control element, without any visible label.\n\n\nSee more: [Field Schema](https://schema.laboperator.com/schemas/definitions/field) "
                                }
                            },
                            "markdownDescription": "Display configuration options for certain field types and widget settings. If a field or widget does not support `ui:options`, the setting is ignored.\n\n\nSee more: [Field Schema](https://schema.laboperator.com/schemas/definitions/field) "
                        },
                        "readOnly": {
                            "type": "boolean",
                            "default": false,
                            "description": "A flag indicating whether a field can be updated once the workflow run has been started.\n",
                            "markdownDescription": "A flag indicating whether a field can be updated once the workflow run has been started.\n\n\nSee more: [Field Schema](https://schema.laboperator.com/schemas/definitions/field) "
                        },
                        "prepare": {
                            "type": "boolean",
                            "default": false,
                            "description": "A flag indicating whether a field must be assigned a value before workflow execution can be started.\n\nSetting both the `prepare` and the `hidden` flag to `true` results in a validation error, because it would not be possible to start workflow execution.\n",
                            "markdownDescription": "A flag indicating whether a field must be assigned a value before workflow execution can be started.\n\nSetting both the `prepare` and the `hidden` flag to `true` results in a validation error, because it would not be possible to start workflow execution.\n\n\nSee more: [Field Schema](https://schema.laboperator.com/schemas/definitions/field) "
                        },
                        "hidden": {
                            "type": "boolean",
                            "default": false,
                            "description": "A flag indicating whether a field is hidden from the user. A hidden field can still be explicitly referenced as, for example, the source data for a table or in the description of a substep and thereby have a visual representation.\n\n Setting both the `prepare` and the `hidden` flag to `true` results in a validation error, because it would not be possible to start workflow execution.\n",
                            "markdownDescription": "A flag indicating whether a field is hidden from the user. A hidden field can still be explicitly referenced as, for example, the source data for a table or in the description of a substep and thereby have a visual representation.\n\n Setting both the `prepare` and the `hidden` flag to `true` results in a validation error, because it would not be possible to start workflow execution.\n\n\nSee more: [Field Schema](https://schema.laboperator.com/schemas/definitions/field) "
                        },
                        "defaultValue": {
                            "description": "Assign a default value to a field. Fields without a default value that also don't require a value to be assigned via the `prepare` flag are empty at the start of a workflow execution.\n",
                            "markdownDescription": "Assign a default value to a field. Fields without a default value that also don't require a value to be assigned via the `prepare` flag are empty at the start of a workflow execution.\n\n\nSee more: [Field Schema](https://schema.laboperator.com/schemas/definitions/field) "
                        },
                        "output": {
                            "type": "boolean",
                            "default": true,
                            "description": "A flag indicating whether a field is included in the output of a workflow run export.\n",
                            "markdownDescription": "A flag indicating whether a field is included in the output of a workflow run export.\n\n\nSee more: [Field Schema](https://schema.laboperator.com/schemas/definitions/field) "
                        },
                        "formatSpecifier": {
                            "$ref": "#/definitions/formatSpecifier",
                            "description": "A specifier describing number formatting for fields of type `number`, `integer`, and `quantity`. All other field types ignore this flag.\n",
                            "markdownDescription": "A specifier describing number formatting for fields of type `number`, `integer`, and `quantity`. All other field types ignore this flag.\n\n\nSee more: [Field Schema](https://schema.laboperator.com/schemas/definitions/field) "
                        },
                        "group": {
                            "type": "string",
                            "maxLength": 50,
                            "description": "A flag that is used to group fields during the workflow preparation stage. Fields with the same group name are displayed together in the order of definition. All fields without a specified group are displayed separately.\n",
                            "markdownDescription": "A flag that is used to group fields during the workflow preparation stage. Fields with the same group name are displayed together in the order of definition. All fields without a specified group are displayed separately.\n\n\nSee more: [Field Schema](https://schema.laboperator.com/schemas/definitions/field) "
                        },
                        "changeReason": {
                            "$ref": "#/definitions/workflow_template/changeReason"
                        }
                    }
                },
                {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/jsonSchemaDraft7"
                        },
                        {
                            "$ref": "#/definitions/field_schema/file"
                        },
                        {
                            "$ref": "#/definitions/field_schema/quantity"
                        },
                        {
                            "$ref": "#/definitions/field_schema/relationship"
                        },
                        {
                            "$ref": "#/definitions/field_schema/script"
                        },
                        {
                            "$ref": "#/definitions/field_schema/timer"
                        }
                    ]
                }
            ],
            "examples": [
                {
                    "type": "string",
                    "enum": [
                        "German",
                        "English"
                    ]
                },
                {
                    "type": "string",
                    "output": false,
                    "group": "Analyst Notes",
                    "ui:widget": "textarea"
                },
                {
                    "type": "boolean",
                    "ui:widget": "switch",
                    "ui:options": {
                        "label": false
                    }
                },
                {
                    "type": "array",
                    "hidden": true,
                    "items": {
                        "type": "object",
                        "properties": {
                            "weight": {
                                "type": "number"
                            },
                            "name": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "changeReason": true
                            }
                        }
                    },
                    "defaultValue": [
                        {
                            "weight": 12,
                            "name": "Sample 1"
                        },
                        {
                            "weight": 17,
                            "name": "Sample 2"
                        }
                    ]
                }
            ],
            "markdownDescription": "A valid field schema is either a valid JSON schema as per [Draft 7](http://json-schema.org/draft-07/schema#) or one of our custom field types. Some additional properties are allowed at the top level.\n\n\nSee more: [Field Schema](https://schema.laboperator.com/schemas/definitions/field) "
        },
        "fieldMapping": {
            "title": "Field Mapping",
            "type": "object",
            "description": "A field mapping is always required when a step defines its own fields.\nThe field mapping maps the global workflow fields to step internal\nfields. During validation it will be ensured that the field types are\ncompatible.\n",
            "minProperties": 1,
            "propertyNames": {
                "description": "A valid field identifier defined by the workflow template.",
                "$ref": "#/definitions/dynamicMemberName",
                "markdownDescription": "A valid field identifier defined by the workflow template.\n\nSee more: [Field Mapping Schema](https://schema.laboperator.com/schemas/definitions/fieldMapping) "
            },
            "additionalProperties": {
                "description": "A valid field identifier defined by the step.",
                "$ref": "#/definitions/memberName",
                "markdownDescription": "A valid field identifier defined by the step.\n\nSee more: [Field Mapping Schema](https://schema.laboperator.com/schemas/definitions/fieldMapping) "
            },
            "examples": [
                {
                    "workflowFieldA": "stepField1",
                    "workflowFieldB": "stepField2",
                    "{{referenceToTheWorkflowField}}": "stepField3"
                }
            ],
            "markdownDescription": "A field mapping is always required when a step defines its own fields.\nThe field mapping maps the global workflow fields to step internal\nfields. During validation it will be ensured that the field types are\ncompatible.\n\n\nSee more: [Field Mapping Schema](https://schema.laboperator.com/schemas/definitions/fieldMapping) "
        },
        "fieldValues": {
            "title": "Field Values",
            "type": "object",
            "description": "Direct assignments of values to step fields. The values are evaluated\nagainst the field schema during validation.\n",
            "minProperties": 1,
            "propertyNames": {
                "description": "A valid field identifier defined by the step.",
                "$ref": "#/definitions/memberName",
                "markdownDescription": "A valid field identifier defined by the step.\n\nSee more: [Field Values Schema](https://schema.laboperator.com/schemas/definitions/fieldValues) "
            },
            "additionalProperties": true,
            "examples": [
                {
                    "stepField1": true,
                    "stepField2": "2014-03-08T23:21:27-10:00"
                }
            ],
            "markdownDescription": "Direct assignments of values to step fields. The values are evaluated\nagainst the field schema during validation.\n\n\nSee more: [Field Values Schema](https://schema.laboperator.com/schemas/definitions/fieldValues) "
        },
        "fields": {
            "type": "object",
            "title": "Fields",
            "description": "Fields are top-level and step-level variables in a workflow template. A field can be used to store and retrieve information during workflow execution.\n\nFields of type array and object can be assigned a schema to validate its value.\n\nA field identifier, which is its key within the `fields` object, is considered unique in the context of a workflow. By definition a second occurrence of the same key will override the first occurrence. In markdown, fields can be referenced via their unique identifier: `{{myStringField}}`\n",
            "propertyNames": {
                "$ref": "#/definitions/memberName"
            },
            "additionalProperties": {
                "$ref": "#/definitions/field"
            },
            "examples": [
                {
                    "enumOptions": {
                        "type": "string",
                        "enum": [
                            "German",
                            "English"
                        ]
                    }
                },
                {
                    "multiLineText": {
                        "type": "string",
                        "output": false,
                        "group": "Analyst Notes",
                        "ui:widget": "textarea"
                    }
                },
                {
                    "switchField": {
                        "type": "boolean",
                        "ui:widget": "switch",
                        "ui:options": {
                            "label": false
                        }
                    }
                },
                {
                    "complexField": {
                        "type": "array",
                        "hidden": true,
                        "items": {
                            "type": "object",
                            "properties": {
                                "weight": {
                                    "type": "number"
                                },
                                "name": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "changeReason": true
                                }
                            }
                        },
                        "defaultValue": [
                            {
                                "weight": 12,
                                "name": "Sample 1"
                            },
                            {
                                "weight": 17,
                                "name": "Sample 2"
                            }
                        ]
                    }
                }
            ],
            "markdownDescription": "Fields are top-level and step-level variables in a workflow template. A field can be used to store and retrieve information during workflow execution.\n\nFields of type array and object can be assigned a schema to validate its value.\n\nA field identifier, which is its key within the `fields` object, is considered unique in the context of a workflow. By definition a second occurrence of the same key will override the first occurrence. In markdown, fields can be referenced via their unique identifier: `{{myStringField}}`\n\n\nSee more: [Fields Schema](https://schema.laboperator.com/schemas/definitions/fields) "
        },
        "formatSpecifier": {
            "type": "string",
            "title": "Format Specifier",
            "description": "A format specifier is a string describing how to format a number for display. It is based on the excellent [d3-format](https://github.com/d3/d3-format) library. For example, a typical fixed point precision of two digits behind the decimal point is achieved with `.2f`. Visit their [official documentation](https://github.com/d3/d3-format#locale_format) for a complete reference and examples.\n\nNote that a format specifier only affects the display value of a field. If the field is used as an interactive control element in the workflow, the user input will not be formatted.\n\nA format specifier can also be defined for a field of type [quantity](/schemas/definitions/field_schema/quantity/).\n",
            "examples": [
                ".6f",
                ".3%"
            ],
            "markdownDescription": "A format specifier is a string describing how to format a number for display. It is based on the excellent [d3-format](https://github.com/d3/d3-format) library. For example, a typical fixed point precision of two digits behind the decimal point is achieved with `.2f`. Visit their [official documentation](https://github.com/d3/d3-format#locale_format) for a complete reference and examples.\n\nNote that a format specifier only affects the display value of a field. If the field is used as an interactive control element in the workflow, the user input will not be formatted.\n\nA format specifier can also be defined for a field of type [quantity](https://schema.laboperator.com/schemas/definitions/field_schema/quantity/).\n\n\nSee more: [Format Specifier Schema](https://schema.laboperator.com/schemas/definitions/format_specifier) "
        },
        "info": {
            "type": "object",
            "title": "Info",
            "description": "The info section of a Workflow (Step) Template holds general information about the template.\n",
            "required": [
                "title",
                "uuid",
                "version"
            ],
            "additionalProperties": false,
            "properties": {
                "title": {
                    "type": "string",
                    "maxLength": 200,
                    "description": "The display name of the template in Laboperator.\n",
                    "examples": [
                        "PTC Integration"
                    ],
                    "markdownDescription": "The display name of the template in Laboperator.\n\n\nSee more: [Info Schema](https://schema.laboperator.com/schemas/definitions/info) "
                },
                "uuid": {
                    "$ref": "#/definitions/uuid"
                },
                "version": {
                    "$ref": "#/definitions/version"
                },
                "description": {
                    "type": "string",
                    "maxLength": 10000,
                    "description": "A descriptive summary of the workflow.\n",
                    "examples": [
                        "Workflow descriptions support __[Markdown](https://en.wikipedia.org/wiki/Markdown)__!'"
                    ],
                    "markdownDescription": "A descriptive summary of the workflow.\n\n\nSee more: [Info Schema](https://schema.laboperator.com/schemas/definitions/info) "
                },
                "author": {
                    "$ref": "#/definitions/author"
                },
                "slug": {
                    "$ref": "#/definitions/slug"
                }
            },
            "markdownDescription": "The info section of a Workflow (Step) Template holds general information about the template.\n\n\nSee more: [Info Schema](https://schema.laboperator.com/schemas/definitions/info) "
        },
        "jsonPointer": {
            "type": "string",
            "title": "JSON Pointer",
            "description": "JSON Pointer is a string syntax for identifying a specific value within a JavaScript Object Notation (JSON) document as defined by [RFC6901](https://tools.ietf.org/html/rfc6901). It contains a sequence of zero or more reference tokens, each prefixed by a '/' character.\n",
            "examples": [
                "/",
                "/0/experiments",
                "/devices/2/weighing",
                "# Use '~1' to escape a '/''\n/mass~1volume  # => for { \"mass/volume\": ... }\n",
                "# Use '~0' to escape a '~'\n/sample~0dilutions  # => for { \"sample~dilutions\": ... }\n"
            ],
            "markdownDescription": "JSON Pointer is a string syntax for identifying a specific value within a JavaScript Object Notation (JSON) document as defined by [RFC6901](https://tools.ietf.org/html/rfc6901). It contains a sequence of zero or more reference tokens, each prefixed by a '/' character.\n\n\nSee more: [Json Pointer Schema](https://schema.laboperator.com/schemas/definitions/jsonPointer) "
        },
        "markdown": {
            "type": "string",
            "title": "Markdown Formatted Content",
            "default": "",
            "description": "## Markdown\n\nRich media content that can be formatted using [Markdown](https://en.wikipedia.org/wiki/Markdown).\n\nFor a general introduction to Markdown go to [Markdown Guide](https://www.markdownguide.org/getting-started/) or search for Markdown to find extensive resources online.\n\n## Laboperator Flavoured Markdown\n\nLaboperator workflows extend Markdown with custom syntax to render\nadditional content.\n\n### Field References\n\nReference fields defined in your workflow to dynamically display their\ncurrent value.\n\n__Syntax__\n```\n{{(field|)<identifier>|<variant>}}\n```\n\n_Note that the `field` type indicator can be omitted for brevity._\n\n__Parameters__\n| __identifier__ | The identifier of the field that is referenced |\n| __variant__    | The reference variant. Should be one of `value`, `title`, `plain`. Defaults to `value`. |\n\n\n__Example 1__\nBy default rendered values are highlighted against the background:\n```\nSome text with an inline reference to {{myField}}.\n```\n\n__Example 2__\nYou can render the title of a field instead of the value using the `title`\nvariant:\n```\nThe field _myField_ has the title {{myField|title}}.\n```\n\n__Example 3__\nUsing the `plain` variant you can render the plain value of a field without\nany highlights. This is for example useful for cleaner tables:\n```\n| {{myField|title}} | {{anotherField|title}} |\n| ----------------- | ---------------------- |\n| {{myField|plain}} | {{anotherField|plain}} |\n```\n\n### Field Inputs\n\nRender inputs for fields defined in your workflow.\n\n__Syntax__\n```\n{{field-input|<identifier>}}\n# or\n!{{<identifier>}}\n```\n\n_Note that the `field-input` type indicator can be omitted for brevity, if the placeholder is prefixed with an exclamation mark (`!`)._\n\n__Parameters__\n| __identifier__ | The identifier of the field that is referenced |\n\n\n__Example 1__\n```\nPlease enter the observed color of the substance:\n!{{observedColor}}\n```\n\n### Grids\n\nYou can use the `%col` tag to organize content in a grid.\n\n__Syntax__\n```\n%col <container?> <card?> <breakpoint={1-12}?>\n  # content is indented by two spaces or one tab\n  content\n```\n\n__Parameters__\n| __container__ | An optional flag that should be set if additional `%col` tags are nested inside. See __Example 2__. |\n| __card__ | An optional flag that can be set if the block should get a background. |\n| __breakpoint__ | Breakpoints can be used to specifically set how many columns of a 12 column grid the block should span. See [Material UI Fluid Grids](https://material-ui.com/components/grid/#fluid-grids) for details. Possible breakpoints are `xs`, `sm`, `md`, `lg`, and `xl`. The value can be between `1` and `12`. |\n\n__Example 1: Simple columns\n```\n%col\n  This text is in one column.\n%col\n  And this text in a second column next to it.\n\n\n%col\n  This text is in a second row.\n%col card\n  This text is in a second row in the second column and has a background\n%col\n  This row can have a different number of columns. This is the third.\n```\n\n__Example 2: Nested columns\n```\n%col container card\n  %col\n    This is a the first column inside an outer block with background.\n  %col container\n    %col\n      We can nest this even further\n    %col\n      Allowing us to build complex layouts\n```\n\n__Example 2: Breakpoints\n```\n%col xs={12} md={6}\n  On a small screen this column fills up the whole width.\n\n  On a tablet in landscape it will only fill up half the screen and the two\n  blocks will show next to each other.\n%col\n  This block will adjust to the first one automatically.\n```\n",
            "markdownDescription": "## Markdown\n\nRich media content that can be formatted using [Markdown](https://en.wikipedia.org/wiki/Markdown).\n\nFor a general introduction to Markdown go to [Markdown Guide](https://www.markdownguide.org/getting-started/) or search for Markdown to find extensive resources online.\n\n## Laboperator Flavoured Markdown\n\nLaboperator workflows extend Markdown with custom syntax to render\nadditional content.\n\n### Field References\n\nReference fields defined in your workflow to dynamically display their\ncurrent value.\n\n__Syntax__\n```\n{{(field|)<identifier>|<variant>}}\n```\n\n_Note that the `field` type indicator can be omitted for brevity._\n\n__Parameters__\n| __identifier__ | The identifier of the field that is referenced |\n| __variant__    | The reference variant. Should be one of `value`, `title`, `plain`. Defaults to `value`. |\n\n\n__Example 1__\nBy default rendered values are highlighted against the background:\n```\nSome text with an inline reference to {{myField}}.\n```\n\n__Example 2__\nYou can render the title of a field instead of the value using the `title`\nvariant:\n```\nThe field _myField_ has the title {{myField|title}}.\n```\n\n__Example 3__\nUsing the `plain` variant you can render the plain value of a field without\nany highlights. This is for example useful for cleaner tables:\n```\n| {{myField|title}} | {{anotherField|title}} |\n| ----------------- | ---------------------- |\n| {{myField|plain}} | {{anotherField|plain}} |\n```\n\n### Field Inputs\n\nRender inputs for fields defined in your workflow.\n\n__Syntax__\n```\n{{field-input|<identifier>}}\n# or\n!{{<identifier>}}\n```\n\n_Note that the `field-input` type indicator can be omitted for brevity, if the placeholder is prefixed with an exclamation mark (`!`)._\n\n__Parameters__\n| __identifier__ | The identifier of the field that is referenced |\n\n\n__Example 1__\n```\nPlease enter the observed color of the substance:\n!{{observedColor}}\n```\n\n### Grids\n\nYou can use the `%col` tag to organize content in a grid.\n\n__Syntax__\n```\n%col <container?> <card?> <breakpoint={1-12}?>\n  # content is indented by two spaces or one tab\n  content\n```\n\n__Parameters__\n| __container__ | An optional flag that should be set if additional `%col` tags are nested inside. See __Example 2__. |\n| __card__ | An optional flag that can be set if the block should get a background. |\n| __breakpoint__ | Breakpoints can be used to specifically set how many columns of a 12 column grid the block should span. See [Material UI Fluid Grids](https://material-ui.com/components/grid/#fluid-grids) for details. Possible breakpoints are `xs`, `sm`, `md`, `lg`, and `xl`. The value can be between `1` and `12`. |\n\n__Example 1: Simple columns\n```\n%col\n  This text is in one column.\n%col\n  And this text in a second column next to it.\n\n\n%col\n  This text is in a second row.\n%col card\n  This text is in a second row in the second column and has a background\n%col\n  This row can have a different number of columns. This is the third.\n```\n\n__Example 2: Nested columns\n```\n%col container card\n  %col\n    This is a the first column inside an outer block with background.\n  %col container\n    %col\n      We can nest this even further\n    %col\n      Allowing us to build complex layouts\n```\n\n__Example 2: Breakpoints\n```\n%col xs={12} md={6}\n  On a small screen this column fills up the whole width.\n\n  On a tablet in landscape it will only fill up half the screen and the two\n  blocks will show next to each other.\n%col\n  This block will adjust to the first one automatically.\n```\n\n\nSee more: [Markdown Schema](https://schema.laboperator.com/schemas/definitions/markdown) "
        },
        "memberName": {
            "type": "string",
            "title": "Member Name",
            "description": "A member name that is used as a reference elsewhere.\nAllowed characters are lower \"a\" to \"z\", capital \"A\" to \"Z\", \"0\" to \"9\" and\n\"-\" , \"_\". We recommend to consistently use either lowerCamelCase or\nkebab-case. While snake_case is allowed, it has a chance of name collisions\nwith internal values.\n",
            "minLength": 3,
            "maxLength": 60,
            "pattern": "(?=^.{3,60}$)(^[a-zA-Z0-9]+(?:[-_]?[a-zA-Z0-9]+)*$)",
            "not": {
                "enum": [
                    "command_response",
                    "data_point",
                    "do",
                    "else",
                    "flow",
                    "if",
                    "INTERNAL_STATE",
                    "loop",
                    "parallel",
                    "step",
                    "substep",
                    "type",
                    "until",
                    "when",
                    "while",
                    "workflow"
                ]
            },
            "examples": [
                "myField",
                "my-field",
                "transportSampleToShaker",
                "transport_sample_to_shaker"
            ],
            "markdownDescription": "A member name that is used as a reference elsewhere.\nAllowed characters are lower \"a\" to \"z\", capital \"A\" to \"Z\", \"0\" to \"9\" and\n\"-\" , \"_\". We recommend to consistently use either lowerCamelCase or\nkebab-case. While snake_case is allowed, it has a chance of name collisions\nwith internal values.\n\n\nSee more: [Member Name Schema](https://schema.laboperator.com/schemas/definitions/member_name) "
        },
        "momentDuration": {
            "title": "Moment Duration",
            "description": "Duration formatting is based on the momentjs\n[momentjs](https://momentjs.com/) library. Head over to\n[docs](https://momentjs.com/docs/#/durations/creating/) for a full\nreference and examples.\n",
            "oneOf": [
                {
                    "type": "array",
                    "item": {
                        "oneOf": [
                            {
                                "type": "string",
                                "enum": [
                                    "years",
                                    "y",
                                    "months",
                                    "M",
                                    "weeks",
                                    "w",
                                    "days",
                                    "d",
                                    "hours",
                                    "h",
                                    "minutes",
                                    "m",
                                    "seconds",
                                    "s",
                                    "milliseconds",
                                    "ms"
                                ]
                            },
                            {
                                "type": "number"
                            }
                        ]
                    }
                },
                {
                    "type": "number",
                    "description": "Duration in milliseconds",
                    "markdownDescription": "Duration in milliseconds\n\nSee more: [Moment Duration Schema](https://schema.laboperator.com/schemas/definitions/moment_duration) "
                },
                {
                    "type": "string",
                    "pattern": "^(-?)P(?=\\d|T\\d)(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)([DW]))?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$",
                    "description": "ISO 8601 durations",
                    "markdownDescription": "ISO 8601 durations\n\nSee more: [Moment Duration Schema](https://schema.laboperator.com/schemas/definitions/moment_duration) "
                },
                {
                    "type": "object",
                    "propertyNames": {
                        "enum": [
                            "seconds",
                            "minutes",
                            "hours",
                            "days",
                            "weeks",
                            "months",
                            "years"
                        ]
                    },
                    "additionalProperties": {
                        "type": "number"
                    }
                }
            ],
            "markdownDescription": "Duration formatting is based on the momentjs\n[momentjs](https://momentjs.com/) library. Head over to\n[docs](https://momentjs.com/docs/#/durations/creating/) for a full\nreference and examples.\n\n\nSee more: [Moment Duration Schema](https://schema.laboperator.com/schemas/definitions/moment_duration) "
        },
        "reportSummary": {
            "type": "string",
            "title": "Information summary about the step that will be generated in the report.",
            "description": "Used to add information that will be generated in the workflow report. The information can contain\nreference to information present in the workflow, like fields, or workflow template information, using the\ndouble curly brackets notation (see examples).\nBesides field identifiers, the following references are supported:\n- step: The step in which the reportSummary is contained. Please refer to the API documentation\n  for the keys available to use for step.\n- template: You can access values from any key inside the workflow template, as long as you pass the keys in the correct\n  hierarchy.\n- operator: The user who completed the step.\n",
            "maxLength": 5000,
            "examples": [
                "Substances mixed using stirrer {{deviceName}} for {{timerField}}.",
                "Experiment ABC123 used as baseline",
                "Using step information:\nStep completed at {{step.data.attributes.completed_at}} by {{operator.data.attributes.full_name}}\n",
                "Using workflow template keys:\n{{template.steps.myStepName.info.title}}: Repeated 3 times, as specified by instructions present\nin ABC123 guidelines.\n"
            ],
            "markdownDescription": "Used to add information that will be generated in the workflow report. The information can contain\nreference to information present in the workflow, like fields, or workflow template information, using the\ndouble curly brackets notation (see examples).\nBesides field identifiers, the following references are supported:\n- step: The step in which the reportSummary is contained. Please refer to the API documentation\n  for the keys available to use for step.\n- template: You can access values from any key inside the workflow template, as long as you pass the keys in the correct\n  hierarchy.\n- operator: The user who completed the step.\n\n\nSee more: [Report Summary Schema](https://schema.laboperator.com/schemas/definitions/reportSummary) "
        },
        "resourceTag": {
            "type": "string",
            "title": "Resource tag",
            "description": "This should map to the tag of the resources we have in our API documentation\n",
            "enum": [
                "automations",
                "channels",
                "collections",
                "command_executions",
                "connectors",
                "custom_attributes",
                "dashboards",
                "devices",
                "events",
                "exports",
                "groups",
                "measurements",
                "notification_settings",
                "notification_triggers",
                "notifications",
                "ports",
                "protonotifications",
                "roles",
                "samples",
                "smart_views",
                "users",
                "versions",
                "webhook_subscriptions",
                "workflow_events",
                "workflow_fields",
                "workflow_runs",
                "workflow_step_templates",
                "workflow_steps",
                "workflow_templates"
            ],
            "markdownDescription": "This should map to the tag of the resources we have in our API documentation\n\n\nSee more: [Resource Tag Schema](https://schema.laboperator.com/schemas/definitions/resourceTag) "
        },
        "schemaVersion": {
            "title": "Schema Version",
            "description": "A valid Workflow Schema version.\n",
            "type": "string",
            "enum": [
                "0.0.1",
                "0.0.2",
                "0.0.3",
                "0.0.4",
                "0.0.5",
                "0.0.6",
                "1.0.0",
                "1.0.1"
            ],
            "markdownDescription": "A valid Workflow Schema version.\n\n\nSee more: [Schema Version Schema](https://schema.laboperator.com/schemas/definitions/schema-version) "
        },
        "script": {
            "default": "",
            "title": "Script",
            "description": "A script that is evaluated and returns a value. The parsing and evaluation is based on [Dentaku](https://github.com/rubysolo/dentaku) and enhanced with custom capabilities.\n\nOnly strings will be evaluated as scripts, everything else will be treated as static values.\n\n## Built-in operators and functions\n\nDetailed tests describing the script behaviors are available on the\n[Denkatu Github Page](https://github.com/rubysolo/dentaku/blob/master/spec/calculator_spec.rb).\n\nMath: `+`, `-`, `*`, `/`, `%`, `^`, `|`, `&`\n\nAlso, all functions from Ruby's Math module, including `SIN`, `COS`, `TAN`, etc.\n\nComparison: `<`, `>`, `<=`, `>=`, `<>`, `!=`, `=`,\n\nLogic: `IF`, `AND`, `OR`, `NOT`, `SWITCH`\n\nNumeric: `MIN`, `MAX`, `SUM`, `AVG`, `COUNT`, `ROUND`, `ROUNDDOWN`, `ROUNDUP`\n\nSelections: `CASE` (syntax see [spec](https://github.com/rubysolo/dentaku/blob/master/spec/calculator_spec.rb#L472))\n\nString: `LEFT`, `RIGHT`, `MID`, `LEN`, `FIND`, `SUBSTITUTE`, `CONCAT`, `CONTAINS`\n\nOperator precedence follows that of any sane language.\n\n## Custom functions\n\nTo work with quantity field we have added the following custom functions:\n\n### AS_QTY\nParse a numeric value to a quantity with the given unit.\n\n**Example**:\n```yml\nvalue: AS_QTY(myNumericField, \"mg\")\n```\n\n### BASE\nReturns the unit in SI base units of the given quantity.\n\n**Example**:\n```yml\nvalue: BASE(myQuantity)\n```\n\n### BASE_SCALAR\nReturns the scalar in base units (SI)\n\n**Example**:\n```yml\nvalue: BASE_SCALAR(myQuantity)\n```\n\n### CELL_POINTER\nReturns the JSON pointer for a table cell value based on a given table identifier and the zero-based row, column, and tab indexes.\n\n**Examples**:\n```yml\n# returns the JSON pointer for the second column, first row, third tab in `myTable`\nCELL_POINTER('myTable', 0, 1, 2)\n```\n\n```yml\n# returns the JSON pointer for the second row, second column in `myTable`\nCELL_POINTER('myTable', 1, 1)\n```\n\n### CONVERT_TO\nConverts the quantity to the target unit. Throws an error if the units\nare not compatible.\n\n**Example**:\n```yml\nvalue: CONVERT_TO(myMgQuantity, 'kg')\n```\n\n### HASH\nCreate arbitrary hash object at run time\n\n**Example**:\n```yml\nvalue: HASH('a', 1, 'b', 2) # returns { \"a\" => 1, \"b\" => 2 }\n```\n\n### MERGE\nMerge 2 arrays, or objects.\n\n**Example**:\n```yml\nvalue: MERGE(arr1, arr2)\n```\n\n### NOW\nReturns the current date/time\n\n**Examples**:\n```yml\nvalue: NOW()\n```\n\n### SCALAR\nReturns the scalar of the quantity without the unit.\n\n**Example**:\n```yml\nvalue: SCALAR(myMgQuantity)\n```\n\n### UNITS\nReturns the unit part of the quantity without as a string.\n\n**Example**:\n```yml\nvalue: UNITS(myMgQuantity)\n```\n\n### VALUE_AT\nReturns the value of a given pointer for the provided field.\n\n**Examples**:\n```yml\nVALUE_AT(myTableData, '/0/density')\n```\n```yml\nVALUE_AT(myField, '/key/anotherKey')\n```\n\n### TIMES\nLoop inside scripting for n number of times\n\n**Example**:\n```yml\nvalue: TIMES(n, index, HASH(\"index\", index))\n```\n\n### UPCASE\nReturns the uppercase of the provided field value\n\n**Example**:\n```yml\nvalue: UPCASE(myStringField)\n```\n\n### DOWNCASE\nReturns the lowercase of the provided field value\n\n**Example**:\n```yml\nvalue: DOWNCASE(myStringField)\n```\n",
            "examples": [
                "field1 >= 100",
                "field1 * (field2 + field3)",
                "# return a static string\n'\"static string\"'\n"
            ],
            "markdownDescription": "A script that is evaluated and returns a value. The parsing and evaluation is based on [Dentaku](https://github.com/rubysolo/dentaku) and enhanced with custom capabilities.\n\nOnly strings will be evaluated as scripts, everything else will be treated as static values.\n\n## Built-in operators and functions\n\nDetailed tests describing the script behaviors are available on the\n[Denkatu Github Page](https://github.com/rubysolo/dentaku/blob/master/spec/calculator_spec.rb).\n\nMath: `+`, `-`, `*`, `/`, `%`, `^`, `|`, `&`\n\nAlso, all functions from Ruby's Math module, including `SIN`, `COS`, `TAN`, etc.\n\nComparison: `<`, `>`, `<=`, `>=`, `<>`, `!=`, `=`,\n\nLogic: `IF`, `AND`, `OR`, `NOT`, `SWITCH`\n\nNumeric: `MIN`, `MAX`, `SUM`, `AVG`, `COUNT`, `ROUND`, `ROUNDDOWN`, `ROUNDUP`\n\nSelections: `CASE` (syntax see [spec](https://github.com/rubysolo/dentaku/blob/master/spec/calculator_spec.rb#L472))\n\nString: `LEFT`, `RIGHT`, `MID`, `LEN`, `FIND`, `SUBSTITUTE`, `CONCAT`, `CONTAINS`\n\nOperator precedence follows that of any sane language.\n\n## Custom functions\n\nTo work with quantity field we have added the following custom functions:\n\n### AS_QTY\nParse a numeric value to a quantity with the given unit.\n\n**Example**:\n```\nvalue: AS_QTY(myNumericField, \"mg\")\n```\n\n### BASE\nReturns the unit in SI base units of the given quantity.\n\n**Example**:\n```\nvalue: BASE(myQuantity)\n```\n\n### BASE_SCALAR\nReturns the scalar in base units (SI)\n\n**Example**:\n```\nvalue: BASE_SCALAR(myQuantity)\n```\n\n### CELL_POINTER\nReturns the JSON pointer for a table cell value based on a given table identifier and the zero-based row, column, and tab indexes.\n\n**Examples**:\n```\n# returns the JSON pointer for the second column, first row, third tab in `myTable`\nCELL_POINTER('myTable', 0, 1, 2)\n```\n\n```\n# returns the JSON pointer for the second row, second column in `myTable`\nCELL_POINTER('myTable', 1, 1)\n```\n\n### CONVERT_TO\nConverts the quantity to the target unit. Throws an error if the units\nare not compatible.\n\n**Example**:\n```\nvalue: CONVERT_TO(myMgQuantity, 'kg')\n```\n\n### HASH\nCreate arbitrary hash object at run time\n\n**Example**:\n```\nvalue: HASH('a', 1, 'b', 2) # returns { \"a\" => 1, \"b\" => 2 }\n```\n\n### MERGE\nMerge 2 arrays, or objects.\n\n**Example**:\n```\nvalue: MERGE(arr1, arr2)\n```\n\n### NOW\nReturns the current date/time\n\n**Examples**:\n```\nvalue: NOW()\n```\n\n### SCALAR\nReturns the scalar of the quantity without the unit.\n\n**Example**:\n```\nvalue: SCALAR(myMgQuantity)\n```\n\n### UNITS\nReturns the unit part of the quantity without as a string.\n\n**Example**:\n```\nvalue: UNITS(myMgQuantity)\n```\n\n### VALUE_AT\nReturns the value of a given pointer for the provided field.\n\n**Examples**:\n```\nVALUE_AT(myTableData, '/0/density')\n```\n```\nVALUE_AT(myField, '/key/anotherKey')\n```\n\n### TIMES\nLoop inside scripting for n number of times\n\n**Example**:\n```\nvalue: TIMES(n, index, HASH(\"index\", index))\n```\n\n### UPCASE\nReturns the uppercase of the provided field value\n\n**Example**:\n```\nvalue: UPCASE(myStringField)\n```\n\n### DOWNCASE\nReturns the lowercase of the provided field value\n\n**Example**:\n```\nvalue: DOWNCASE(myStringField)\n```\n\n\nSee more: [Script Schema](https://schema.laboperator.com/schemas/definitions/script) "
        },
        "secret": {
            "type": "object",
            "additionalProperties": false,
            "minProperties": 1,
            "properties": {
                "scope": {
                    "type": "string",
                    "enum": [
                        "personal",
                        "organisation"
                    ],
                    "default": "personal",
                    "description": "A flag indicating the type of secret that is accepted. Personal secrets can only be accessed by the user who created them. Organization secrets can only be created by administrators and are accessible to every member of the organization.\n",
                    "markdownDescription": "A flag indicating the type of secret that is accepted. Personal secrets can only be accessed by the user who created them. Organization secrets can only be created by administrators and are accessible to every member of the organization.\n\n\nSee more: [Secret Schema](https://schema.laboperator.com/schemas/definitions/secret) "
                },
                "description": {
                    "type": "string",
                    "description": "The secret description is displayed before the workflow run is started. It is strongly recommended to provide a description to help users understand exactly what kind of secret value is required in order to successfully execute the workflow.\n",
                    "markdownDescription": "The secret description is displayed before the workflow run is started. It is strongly recommended to provide a description to help users understand exactly what kind of secret value is required in order to successfully execute the workflow.\n\n\nSee more: [Secret Schema](https://schema.laboperator.com/schemas/definitions/secret) "
                }
            }
        },
        "secrets": {
            "type": "object",
            "title": "Secrets",
            "description": "Secrets are sensitive information that should not be stored in workflow fields, for example passwords or API tokens.\n\nSecrets can be referenced in workflow behaviors via their unique identifier:\n\n`{{secrets.SECRET_KEY}}`\n",
            "propertyNames": {
                "$ref": "#/definitions/memberName"
            },
            "additionalProperties": {
                "$ref": "#/definitions/secret"
            },
            "markdownDescription": "Secrets are sensitive information that should not be stored in workflow fields, for example passwords or API tokens.\n\nSecrets can be referenced in workflow behaviors via their unique identifier:\n\n`{{secrets.SECRET_KEY}}`\n\n\nSee more: [Secrets Schema](https://schema.laboperator.com/schemas/definitions/secrets) "
        },
        "slug": {
            "type": "string",
            "title": "Slug",
            "description": "A URL compatible slug that can also be used as a reference elsewhere. By\ndefault it will generated from the components name or uuid.\n",
            "pattern": "^[a-z0-9]+(?:[-_][a-z0-9]+)*$",
            "examples": [
                "my-premium-workflow"
            ],
            "markdownDescription": "A URL compatible slug that can also be used as a reference elsewhere. By\ndefault it will generated from the components name or uuid.\n\n\nSee more: [Slug Schema](https://schema.laboperator.com/schemas/definitions/slug) "
        },
        "statusCode": {
            "type": "string",
            "title": "HTTP status code",
            "description": "A status code is the 3 digit code ranging from 1xx to 5xx that\nwill be present in the response\n",
            "minLength": 3,
            "maxLength": 3,
            "pattern": "^[1-5][0-9][0-9]$",
            "examples": [
                "200",
                "404",
                "500"
            ],
            "markdownDescription": "A status code is the 3 digit code ranging from 1xx to 5xx that\nwill be present in the response\n\n\nSee more: [Status Code Schema](https://schema.laboperator.com/schemas/definitions/status_code) "
        },
        "stepAttributes": {
            "type": "object",
            "title": "The Workflow Step Template Schema",
            "description": "A step is a closed set of activities and instructions. Steps can be defined\nindependent of a workflow and then be reused across different workflows.\n\nA step descriptor file describes a workflow consisting of four parts:\n1. info: General information about the workflow.\n2. fields: Global context in this workflow.\n3. steps: Definition of all unique steps that occur in the workflow.\n4. workflow: The flow of steps and mapping of fields.\n",
            "required": [
                "substeps"
            ],
            "properties": {
                "config": {
                    "$ref": "#/definitions/config/stepConfig"
                },
                "fields": {
                    "description": "In a step, fields are optional. If no fields are defined, the fields of\nthe workflow will be passed down to the step as they are. However, if\nthe step does define fields, the fields of the workflow have to be\nactively mapped to be available and avoid name collisions.\n",
                    "$ref": "#/definitions/fields",
                    "markdownDescription": "In a step, fields are optional. If no fields are defined, the fields of\nthe workflow will be passed down to the step as they are. However, if\nthe step does define fields, the fields of the workflow have to be\nactively mapped to be available and avoid name collisions.\n\n\nSee more: [Step Attributes Schema](https://schema.laboperator.com/schemas/definitions/stepAttributes) "
                },
                "behaviors": {
                    "$ref": "#/definitions/workflow_template/behaviors"
                },
                "substeps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/step/substep"
                    }
                },
                "contextInfo": {
                    "$ref": "#/definitions/contextInfo"
                },
                "reportSummary": {
                    "$ref": "#/definitions/reportSummary"
                },
                "tables": {
                    "$ref": "#/definitions/step/tables"
                },
                "buttons": {
                    "$ref": "#/definitions/buttons"
                }
            },
            "markdownDescription": "A step is a closed set of activities and instructions. Steps can be defined\nindependent of a workflow and then be reused across different workflows.\n\nA step descriptor file describes a workflow consisting of four parts:\n1. info: General information about the workflow.\n2. fields: Global context in this workflow.\n3. steps: Definition of all unique steps that occur in the workflow.\n4. workflow: The flow of steps and mapping of fields.\n\n\nSee more: [Step Attributes Schema](https://schema.laboperator.com/schemas/definitions/stepAttributes) "
        },
        "stepIdentifier": {
            "allOf": [
                {
                    "type": "string",
                    "title": "A step identifier",
                    "description": "A valid step identifier that can be mapped to one of the keys of the\n`steps` section of the workflow.\n",
                    "not": {
                        "type": "string",
                        "enum": [
                            "if",
                            "then",
                            "else",
                            "parallel",
                            "when",
                            "while",
                            "until",
                            "loop",
                            "do"
                        ]
                    },
                    "markdownDescription": "A valid step identifier that can be mapped to one of the keys of the\n`steps` section of the workflow.\n\n\nSee more: [Step Identifier Schema](https://schema.laboperator.com/schemas/definitions/step_identifier) "
                },
                {
                    "$ref": "#/definitions/memberName"
                }
            ]
        },
        "stepReference": {
            "type": "object",
            "title": "Schema for a reference to an external step",
            "description": "A reference to workflow step defined outside the workflow template.\nAdditional properties might be added to the reference for documentation\npurposes. It is recommended to use the `$comment` property.\n",
            "required": [
                "uuid",
                "version"
            ],
            "additionalProperties": true,
            "properties": {
                "uuid": {
                    "$ref": "#/definitions/uuid"
                },
                "version": {
                    "$ref": "#/definitions/version"
                },
                "missing": {
                    "type": "boolean",
                    "default": false,
                    "description": "Set to true if the external step failed to be found during workflow run\n",
                    "markdownDescription": "Set to true if the external step failed to be found during workflow run\n\n\nSee more: [Step Reference Schema](https://schema.laboperator.com/schemas/definitions/step_reference) "
                }
            },
            "markdownDescription": "A reference to workflow step defined outside the workflow template.\nAdditional properties might be added to the reference for documentation\npurposes. It is recommended to use the `$comment` property.\n\n\nSee more: [Step Reference Schema](https://schema.laboperator.com/schemas/definitions/step_reference) "
        },
        "timestamp": {
            "title": "timestamp",
            "description": "Representation of dates and times.\n",
            "type": "string",
            "pattern": "^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?$",
            "examples": [
                "2020-03-23T18:26:44Z"
            ],
            "markdownDescription": "Representation of dates and times.\n\n\nSee more: [Timestamp Schema](https://schema.laboperator.com/schemas/definitions/timestamp) "
        },
        "uuid": {
            "type": "string",
            "title": "UUID",
            "description": "An RFC4122 compliant UUID.\n",
            "pattern": "([a-f0-9]{8}-?[a-f0-9]{4}-?[1-5][a-f0-9]{3}-?[89ab][a-f0-9]{3}-?[a-f0-9]{12}){1}",
            "examples": [
                "645afc8c-a553-4657-a0da-d93cb98d158b"
            ],
            "markdownDescription": "An RFC4122 compliant UUID.\n\n\nSee more: [Uuid Schema](https://schema.laboperator.com/schemas/definitions/uuid) "
        },
        "version": {
            "type": "string",
            "title": "Version",
            "description": "A version that is a valid version tag according to the\n[Semantic Versioning 2.0.0](https://semver.org) Specification. We\nencourage you to follow the SemVer guidelines:\n\nGiven a version number MAJOR.MINOR.PATCH, increment the:\n\n1. MAJOR version when you make incompatible API changes,\n2. MINOR version when you add functionality in a backwards-compatible\n   manner, and\n3. PATCH version when you make backwards-compatible bug fixes.\n",
            "default": "1.0.0",
            "examples": [
                "1.0.0"
            ],
            "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(-(0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(\\.(0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\\+[0-9a-zA-Z-]+(\\.[0-9a-zA-Z-]+)*)?$",
            "markdownDescription": "A version that is a valid version tag according to the\n[Semantic Versioning 2.0.0](https://semver.org) Specification. We\nencourage you to follow the SemVer guidelines:\n\nGiven a version number MAJOR.MINOR.PATCH, increment the:\n\n1. MAJOR version when you make incompatible API changes,\n2. MINOR version when you add functionality in a backwards-compatible\n   manner, and\n3. PATCH version when you make backwards-compatible bug fixes.\n\n\nSee more: [Version Schema](https://schema.laboperator.com/schemas/definitions/version) "
        },
        "config": {
            "signature": {
                "type": "object",
                "title": "Signature",
                "description": "A flag indicating whether a workflow run can be signed.\n\nSignatures can be applied to any run with at least one completed step by anyone who has access to the run.\n",
                "required": [
                    "enabled"
                ],
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "default": false,
                        "description": "Specify whether the run can be signed.\n",
                        "markdownDescription": "Specify whether the run can be signed.\n\n\nSee more: [Signature Schema](https://schema.laboperator.com/schemas/definitions/config/signature) "
                    },
                    "intentions": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                                "type",
                                "message"
                            ],
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "enum": [
                                        "collaborator",
                                        "reviewer"
                                    ]
                                },
                                "message": {
                                    "type": "string",
                                    "maxLength": 1000
                                }
                            }
                        }
                    }
                },
                "examples": [
                    {
                        "signature": {
                            "enabled": true
                        }
                    }
                ],
                "markdownDescription": "A flag indicating whether a workflow run can be signed.\n\nSignatures can be applied to any run with at least one completed step by anyone who has access to the run.\n\n\nSee more: [Signature Schema](https://schema.laboperator.com/schemas/definitions/config/signature) "
            },
            "stepConfig": {
                "type": "object",
                "title": "Configuration Section Schema of a step",
                "description": "The configuration section of a step template holds general options for the\nworkflow display.\n\nStep configurations will override workflow configurations.\n",
                "additionalProperties": false,
                "properties": {
                    "navigationDelay": {
                        "allOf": [
                            {
                                "$ref": "#/definitions/duration"
                            },
                            {
                                "default": "5s",
                                "description": "The duration by which the automatic navigation to the next step is\ndelayed.\n",
                                "markdownDescription": "The duration by which the automatic navigation to the next step is\ndelayed.\n\n\nSee more: [Step Config Schema](https://schema.laboperator.com/schemas/definitions/config/stepConfig) "
                            }
                        ]
                    }
                },
                "markdownDescription": "The configuration section of a step template holds general options for the\nworkflow display.\n\nStep configurations will override workflow configurations.\n\n\nSee more: [Step Config Schema](https://schema.laboperator.com/schemas/definitions/config/stepConfig) "
            },
            "workflowConfig": {
                "type": "object",
                "title": "Configuration Section Schema of a workflow template",
                "description": "The configuration section of a workflow template holds general options for the\nworkflow display.\n\nStep configurations will override workflow configuration.\n",
                "additionalProperties": false,
                "properties": {
                    "navigationDelay": {
                        "allOf": [
                            {
                                "$ref": "#/definitions/duration"
                            },
                            {
                                "default": "5s",
                                "description": "The duration by which the automatic navigation to the next step is\ndelayed.\n",
                                "markdownDescription": "The duration by which the automatic navigation to the next step is\ndelayed.\n\n\nSee more: [Workflow Config Schema](https://schema.laboperator.com/schemas/definitions/config/workflowConfig) "
                            }
                        ]
                    },
                    "contextInfoSettings": {
                        "$ref": "#/definitions/context_info/contextInfoSettings"
                    },
                    "reportHeader": {
                        "type": "string",
                        "title": "Header of the workflow report.",
                        "description": "Used to add header information that will be generated in the workflow report. The information can contain\nreference to information present in the workflow, like workflow template information, using the\ndouble curly brackets notation (see examples).\nBesides field identifiers, the following references are supported:\n- workflow template keys. You can access values from any key inside the workflow template, as long as you pass the keys in the correct\n  hierarchy.\n- run: information about the current workflow run\n",
                        "examples": [
                            "{{run.data.attributes.title}}",
                            "Workflow run {{run.data.attributes.title}} created at {{run.data.attributes.created_at}}",
                            "Experiment ABC123",
                            "{{template.info.title}}"
                        ],
                        "markdownDescription": "Used to add header information that will be generated in the workflow report. The information can contain\nreference to information present in the workflow, like workflow template information, using the\ndouble curly brackets notation (see examples).\nBesides field identifiers, the following references are supported:\n- workflow template keys. You can access values from any key inside the workflow template, as long as you pass the keys in the correct\n  hierarchy.\n- run: information about the current workflow run\n\n\nSee more: [Workflow Config Schema](https://schema.laboperator.com/schemas/definitions/config/workflowConfig) "
                    },
                    "signature": {
                        "$ref": "#/definitions/config/signature"
                    }
                },
                "markdownDescription": "The configuration section of a workflow template holds general options for the\nworkflow display.\n\nStep configurations will override workflow configuration.\n\n\nSee more: [Workflow Config Schema](https://schema.laboperator.com/schemas/definitions/config/workflowConfig) "
            }
        },
        "context_info": {
            "contextInfoPage": {
                "type": "object",
                "title": "Page containing context information",
                "description": "Pages displayed as workflow context information.\n",
                "required": [
                    "title",
                    "content"
                ],
                "properties": {
                    "title": {
                        "type": "string",
                        "title": "Title",
                        "description": "The displayed title of the page.\n",
                        "examples": [
                            "Formula"
                        ],
                        "markdownDescription": "The displayed title of the page.\n\n\nSee more: [Context Info Page Schema](https://schema.laboperator.com/schemas/definitions/context_info/contextInfoPage) "
                    },
                    "content": {
                        "type": "string",
                        "title": "Main content",
                        "description": "Display text, tables, fields values and media using Markdown.\n",
                        "default": "",
                        "examples": [
                            "Add a fancy slide content. It even supports __[Markdown](https://en.wikipedia.org/wiki/Markdown)__!"
                        ],
                        "markdownDescription": "Display text, tables, fields values and media using Markdown.\n\n\nSee more: [Context Info Page Schema](https://schema.laboperator.com/schemas/definitions/context_info/contextInfoPage) "
                    }
                },
                "markdownDescription": "Pages displayed as workflow context information.\n\n\nSee more: [Context Info Page Schema](https://schema.laboperator.com/schemas/definitions/context_info/contextInfoPage) "
            },
            "contextInfoSettings": {
                "type": "object",
                "title": "Context information panel settings",
                "description": "Configuration of the workflow context information.\n",
                "properties": {
                    "toggleButton": {
                        "type": "object",
                        "title": "Toggle button settings",
                        "description": "Configuration of the toggle button which opens/closes the panel.",
                        "properties": {
                            "label": {
                                "description": "Label of the button",
                                "type": "string",
                                "default": "Info",
                                "examples": [
                                    "Info"
                                ],
                                "markdownDescription": "Label of the button\n\nSee more: [Context Info Settings Schema](https://schema.laboperator.com/schemas/definitions/context_info/contextInfoSettings) "
                            }
                        },
                        "markdownDescription": "Configuration of the toggle button which opens/closes the panel.\n\nSee more: [Context Info Settings Schema](https://schema.laboperator.com/schemas/definitions/context_info/contextInfoSettings) "
                    },
                    "allowFullscreen": {
                        "title": "Full-screen mode toggle",
                        "description": "Switches the ability to expand the panel to the full screen height.\n",
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "Switches the ability to expand the panel to the full screen height.\n\n\nSee more: [Context Info Settings Schema](https://schema.laboperator.com/schemas/definitions/context_info/contextInfoSettings) "
                    },
                    "initialState": {
                        "type": "object",
                        "title": "Initial state of the context information panel",
                        "description": "Determines the behavior of the context information panel when the workflow run execution view is opened.\n",
                        "properties": {
                            "open": {
                                "type": "boolean",
                                "default": false
                            },
                            "fullscreen": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "markdownDescription": "Determines the behavior of the context information panel when the workflow run execution view is opened.\n\n\nSee more: [Context Info Settings Schema](https://schema.laboperator.com/schemas/definitions/context_info/contextInfoSettings) "
                    },
                    "contentPanel": {
                        "type": "object",
                        "title": "Content panel settings",
                        "description": "Configuration of the panel.\n",
                        "properties": {
                            "color": {
                                "description": "Background color.",
                                "type": "string",
                                "default": "#f5f5f5",
                                "examples": [
                                    "white",
                                    "#210210"
                                ],
                                "markdownDescription": "Background color.\n\nSee more: [Context Info Settings Schema](https://schema.laboperator.com/schemas/definitions/context_info/contextInfoSettings) "
                            },
                            "height": {
                                "description": "Height of opened panel in pixels.",
                                "type": "number",
                                "default": 160,
                                "markdownDescription": "Height of opened panel in pixels.\n\nSee more: [Context Info Settings Schema](https://schema.laboperator.com/schemas/definitions/context_info/contextInfoSettings) "
                            }
                        },
                        "markdownDescription": "Configuration of the panel.\n\n\nSee more: [Context Info Settings Schema](https://schema.laboperator.com/schemas/definitions/context_info/contextInfoSettings) "
                    }
                },
                "markdownDescription": "Configuration of the workflow context information.\n\n\nSee more: [Context Info Settings Schema](https://schema.laboperator.com/schemas/definitions/context_info/contextInfoSettings) "
            }
        },
        "field_schema": {
            "file": {
                "type": "object",
                "description": "Defines a field of type `file`.\n",
                "required": [
                    "type",
                    "mediaType"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "file"
                        ]
                    },
                    "mediaType": {
                        "description": "A [media type](https://www.iana.org/assignments/media-types/media-types.xhtml) is an identifier for file formats and format contents. Note that not all possible media types might be supported.\n",
                        "type": "string",
                        "markdownDescription": "A [media type](https://www.iana.org/assignments/media-types/media-types.xhtml) is an identifier for file formats and format contents. Note that not all possible media types might be supported.\n\n\nSee more: [File Schema](https://schema.laboperator.com/schemas/definitions/field_schema/file) "
                    }
                },
                "examples": [
                    {
                        "type": "file",
                        "mediaType": "application/pdf"
                    },
                    {
                        "type": "file",
                        "mediaType": "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                    }
                ],
                "markdownDescription": "Defines a field of type `file`.\n\n\nSee more: [File Schema](https://schema.laboperator.com/schemas/definitions/field_schema/file) "
            },
            "quantity": {
                "type": "object",
                "description": "Defines a field of type `quantity`. A quantity is a real number with a unit represented as a string. Compatible units of a given kind will be converted automatically.\n",
                "required": [
                    "type"
                ],
                "oneOf": [
                    {
                        "required": [
                            "unit"
                        ]
                    },
                    {
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "not": {
                            "anyOf": [
                                {
                                    "required": [
                                        "unit"
                                    ]
                                },
                                {
                                    "required": [
                                        "kind"
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "quantity"
                        ]
                    },
                    "unit": {
                        "type": "string",
                        "description": "If a unit is specified, the value of the field should match that unit. You may only define a unit or kind, not both.\n\nSee the list of [supported units](https://github.com/gentooboontoo/js-quantities/blob/master/src/quantities/definitions.js).\n",
                        "examples": [
                            "mm",
                            "sqft",
                            "millilitres",
                            "hPa",
                            "mA",
                            "Ohm"
                        ],
                        "markdownDescription": "If a unit is specified, the value of the field should match that unit. You may only define a unit or kind, not both.\n\nSee the list of [supported units](https://github.com/gentooboontoo/js-quantities/blob/master/src/quantities/definitions.js).\n\n\nSee more: [Quantity Schema](https://schema.laboperator.com/schemas/definitions/field_schema/quantity) "
                    },
                    "kind": {
                        "type": "string",
                        "description": "If a kind is specified, the value of the field should match that kind. You may only define a unit or kind, not both.\n\nSee the list of [supported kinds](https://github.com/gentooboontoo/js-quantities/blob/master/src/quantities/kind.js).\n",
                        "examples": [
                            "length",
                            "area",
                            "volume",
                            "pressure",
                            "current",
                            "resistance"
                        ],
                        "markdownDescription": "If a kind is specified, the value of the field should match that kind. You may only define a unit or kind, not both.\n\nSee the list of [supported kinds](https://github.com/gentooboontoo/js-quantities/blob/master/src/quantities/kind.js).\n\n\nSee more: [Quantity Schema](https://schema.laboperator.com/schemas/definitions/field_schema/quantity) "
                    }
                },
                "examples": [
                    {
                        "type": "quantity",
                        "defaultValue": {
                            "number": 120,
                            "unit": "mm"
                        },
                        "unit": "mm"
                    },
                    {
                        "type": "quantity",
                        "defaultValue": {
                            "number": 1431000,
                            "unit": "Ohm"
                        },
                        "kind": "resistance"
                    }
                ],
                "markdownDescription": "Defines a field of type `quantity`. A quantity is a real number with a unit represented as a string. Compatible units of a given kind will be converted automatically.\n\n\nSee more: [Quantity Schema](https://schema.laboperator.com/schemas/definitions/field_schema/quantity) "
            },
            "relationship": {
                "type": "object",
                "description": "Defines a field of type `relationship`.\n",
                "required": [
                    "type",
                    "resourceType"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "relationship"
                        ]
                    },
                    "resourceType": {
                        "type": "string",
                        "description": "The type of resource referenced by this relationship.",
                        "enum": [
                            "users",
                            "devices",
                            "measurements",
                            "samples",
                            "channels",
                            "collections",
                            "attachments"
                        ],
                        "markdownDescription": "The type of resource referenced by this relationship.\n\nSee more: [Relationship Schema](https://schema.laboperator.com/schemas/definitions/field_schema/relationship) "
                    },
                    "multiple": {
                        "type": "boolean",
                        "default": false,
                        "description": "A boolean flag indicating that multiple entities can be referenced.\n",
                        "markdownDescription": "A boolean flag indicating that multiple entities can be referenced.\n\n\nSee more: [Relationship Schema](https://schema.laboperator.com/schemas/definitions/field_schema/relationship) "
                    },
                    "filter": {
                        "$ref": "#/definitions/script",
                        "description": "A filter expression that allows to filter available resources further. A\nresources attribute will be passed to the filter expression. Refer to\nthe resource object descriptions of the API for more information about\navailable attributes.\n",
                        "examples": [
                            "device_class == 2000",
                            "email ~= \"@partner.company.com\"",
                            "unit == \"mg\""
                        ],
                        "markdownDescription": "A filter expression that allows to filter available resources further. A\nresources attribute will be passed to the filter expression. Refer to\nthe resource object descriptions of the API for more information about\navailable attributes.\n\n\nSee more: [Relationship Schema](https://schema.laboperator.com/schemas/definitions/field_schema/relationship) "
                    }
                },
                "markdownDescription": "Defines a field of type `relationship`.\n\n\nSee more: [Relationship Schema](https://schema.laboperator.com/schemas/definitions/field_schema/relationship) "
            },
            "script": {
                "type": "object",
                "description": "Defines a field of type `script`. The result of the script evaluation determines the field's value. See the [Script schema](/schemas/definitions/script) for more information on writing expressions and examples.\n",
                "required": [
                    "type",
                    "script",
                    "result"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "script"
                        ]
                    },
                    "script": {
                        "$ref": "#/definitions/script",
                        "description": "The script will be evaluated to determine the value of the field\nwhenever it is accessed.\n",
                        "markdownDescription": "The script will be evaluated to determine the value of the field\nwhenever it is accessed.\n\n\nSee more: [Script Schema](https://schema.laboperator.com/schemas/definitions/field_schema/script) "
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Script fields are always read-only as their value is calculated.\n",
                        "const": true,
                        "markdownDescription": "Script fields are always read-only as their value is calculated.\n\n\nSee more: [Script Schema](https://schema.laboperator.com/schemas/definitions/field_schema/script) "
                    },
                    "result": {
                        "description": "A schema to validate the returned value of the script.\n",
                        "allOf": [
                            {
                                "type": "object",
                                "required": [
                                    "type"
                                ]
                            },
                            {
                                "oneOf": [
                                    {
                                        "$ref": "#/definitions/jsonSchemaDraft7"
                                    },
                                    {
                                        "$ref": "#/definitions/field_schema/quantity"
                                    },
                                    {
                                        "$ref": "#/definitions/field_schema/relationship"
                                    },
                                    {
                                        "$ref": "#/definitions/field_schema/timer"
                                    }
                                ]
                            }
                        ],
                        "examples": [
                            {
                                "type": "quantity",
                                "unit": "mg"
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "number"
                                        },
                                        "vendor": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        ],
                        "markdownDescription": "A schema to validate the returned value of the script.\n\n\nSee more: [Script Schema](https://schema.laboperator.com/schemas/definitions/field_schema/script) "
                    }
                },
                "examples": [
                    {
                        "type": "script",
                        "script": "(weight + 10) / 2",
                        "result": {
                            "type": "quantity",
                            "unit": "mg"
                        }
                    }
                ],
                "markdownDescription": "Defines a field of type `script`. The result of the script evaluation determines the field's value. See the [Script schema](https://schema.laboperator.com/schemas/definitions/script) for more information on writing expressions and examples.\n\n\nSee more: [Script Schema](https://schema.laboperator.com/schemas/definitions/field_schema/script) "
            },
            "timer": {
                "type": "object",
                "description": "Defines a field of type `timer` to measure time or execute time-controlled actions.\n\nTimers have two possible modes of operation, countdown and stopwatch. In countdown mode, the timer will run for a specified duration and fire a [Timer Complete trigger](/schemas/definitions/workflow_template/trigger_objects/timerComplete/) upon completion. In _stopwatch_ mode, the timer measures time until it is stopped, either manually or through an [action](/schemas/definitions/workflow_template/actions/).\n",
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "timer"
                        ]
                    },
                    "defaultDuration": {
                        "$ref": "#/definitions/duration",
                        "description": "The default value of the timer. If set to a non-zero value, the timer will run in countdown mode. If no duration is defined or it is set to _\"0:00\"_, the timer will run in stopwatch mode. Note that also defining `defaultValue` will overwrite this setting.\n",
                        "examples": [
                            90,
                            "1 mins 30 sec",
                            "1:30"
                        ],
                        "markdownDescription": "The default value of the timer. If set to a non-zero value, the timer will run in countdown mode. If no duration is defined or it is set to _\"0:00\"_, the timer will run in stopwatch mode. Note that also defining `defaultValue` will overwrite this setting.\n\n\nSee more: [Timer Schema](https://schema.laboperator.com/schemas/definitions/field_schema/timer) "
                    },
                    "showButtons": {
                        "type": "boolean",
                        "default": false,
                        "description": "A flag indicating whether to show all timer control buttons. Use this setting to conveniently remove all buttons in case of the timer being controlled entirely by [actions](/schemas/definitions/workflow_template/actions/). This setting take precedence over the settings for the individual buttons.\n",
                        "markdownDescription": "A flag indicating whether to show all timer control buttons. Use this setting to conveniently remove all buttons in case of the timer being controlled entirely by [actions](https://schema.laboperator.com/schemas/definitions/workflow_template/actions/). This setting take precedence over the settings for the individual buttons.\n\n\nSee more: [Timer Schema](https://schema.laboperator.com/schemas/definitions/field_schema/timer) "
                    },
                    "showStartButton": {
                        "type": "boolean",
                        "default": false,
                        "description": "A flag indicating whether to show the start button.\n",
                        "markdownDescription": "A flag indicating whether to show the start button.\n\n\nSee more: [Timer Schema](https://schema.laboperator.com/schemas/definitions/field_schema/timer) "
                    },
                    "showStopButton": {
                        "type": "boolean",
                        "default": false,
                        "description": "A flag indicating whether to show the stop button.\n",
                        "markdownDescription": "A flag indicating whether to show the stop button.\n\n\nSee more: [Timer Schema](https://schema.laboperator.com/schemas/definitions/field_schema/timer) "
                    },
                    "showResetButton": {
                        "type": "boolean",
                        "default": false,
                        "description": "A flag indicating whether to show the reset button.\n",
                        "markdownDescription": "A flag indicating whether to show the reset button.\n\n\nSee more: [Timer Schema](https://schema.laboperator.com/schemas/definitions/field_schema/timer) "
                    },
                    "skipBehaviors": {
                        "type": "boolean",
                        "default": false,
                        "description": "A flag indicating whether to skip automatically creating behaviors to\nhandle the control button, e.g. starting the countdown.\n",
                        "markdownDescription": "A flag indicating whether to skip automatically creating behaviors to\nhandle the control button, e.g. starting the countdown.\n\n\nSee more: [Timer Schema](https://schema.laboperator.com/schemas/definitions/field_schema/timer) "
                    }
                },
                "examples": [
                    {
                        "type": "timer",
                        "defaultDuration": "120 seconds",
                        "showButtons": true
                    },
                    {
                        "type": "timer",
                        "skipBehaviors": true,
                        "showStartButton": true,
                        "showResetButton": true
                    }
                ],
                "markdownDescription": "Defines a field of type `timer` to measure time or execute time-controlled actions.\n\nTimers have two possible modes of operation, countdown and stopwatch. In countdown mode, the timer will run for a specified duration and fire a [Timer Complete trigger](https://schema.laboperator.com/schemas/definitions/workflow_template/trigger_objects/timerComplete/) upon completion. In _stopwatch_ mode, the timer measures time until it is stopped, either manually or through an [action](/schemas/definitions/workflow_template/actions/).\n\n\nSee more: [Timer Schema](https://schema.laboperator.com/schemas/definitions/field_schema/timer) "
            }
        },
        "flow": {
            "flowControl": {
                "oneOf": [
                    {
                        "$ref": "#/definitions/stepIdentifier"
                    },
                    {
                        "$ref": "#/definitions/flow/stepObject"
                    },
                    {
                        "$ref": "#/definitions/flow/sequential"
                    },
                    {
                        "$ref": "#/definitions/flow/if"
                    },
                    {
                        "$ref": "#/definitions/flow/loop"
                    },
                    {
                        "$ref": "#/definitions/flow/while"
                    },
                    {
                        "$ref": "#/definitions/flow/forEachArray"
                    },
                    {
                        "$ref": "#/definitions/flow/forEachInteger"
                    }
                ]
            },
            "forEachArray": {
                "type": "object",
                "title": "For-Each Array Flow",
                "description": "An iteration flow of steps or nested flow control schemas.\nThe loop will be iterated once per item in a given source array.\n",
                "required": [
                    "forEach",
                    "in",
                    "do"
                ],
                "additionalProperties": false,
                "properties": {
                    "forEach": {
                        "$ref": "#/definitions/memberName",
                        "description": "An intermediate iterator field which holds the index of the current array item.\nThe field must be defined in the template as type `integer`.\n",
                        "markdownDescription": "An intermediate iterator field which holds the index of the current array item.\nThe field must be defined in the template as type `integer`.\n\n\nSee more: [For Each Array Schema](https://schema.laboperator.com/schemas/definitions/flow/forEachArray) "
                    },
                    "in": {
                        "$ref": "#/definitions/memberName",
                        "description": "A source data field which will be iterated upon.\nThe field must be defined as type `array` in the template.\nModifications to the array length or item order during or after the iteration is not supported\nand will lead to undefined behavior.\n",
                        "markdownDescription": "A source data field which will be iterated upon.\nThe field must be defined as type `array` in the template.\nModifications to the array length or item order during or after the iteration is not supported\nand will lead to undefined behavior.\n\n\nSee more: [For Each Array Schema](https://schema.laboperator.com/schemas/definitions/flow/forEachArray) "
                    },
                    "do": {
                        "$ref": "#/definitions/flow/flowControl"
                    }
                },
                "examples": [
                    {
                        "forEach": "iterator",
                        "in": "collection",
                        "do": [
                            "step1",
                            "step2"
                        ]
                    }
                ],
                "markdownDescription": "An iteration flow of steps or nested flow control schemas.\nThe loop will be iterated once per item in a given source array.\n\n\nSee more: [For Each Array Schema](https://schema.laboperator.com/schemas/definitions/flow/forEachArray) "
            },
            "forEachInteger": {
                "type": "object",
                "title": "For-Each Integer Flow",
                "description": "An iteration flow of steps or nested flow control schemas.\nThe loop will be iterated up to the given limit of an iterator integer.\n",
                "required": [
                    "forEach",
                    "to",
                    "do"
                ],
                "additionalProperties": false,
                "properties": {
                    "forEach": {
                        "$ref": "#/definitions/memberName",
                        "description": "An intermediate iterator field which holds the index of current iteration.\nThe field must be defined in the template as type `integer`.\n",
                        "markdownDescription": "An intermediate iterator field which holds the index of current iteration.\nThe field must be defined in the template as type `integer`.\n\n\nSee more: [For Each Integer Schema](https://schema.laboperator.com/schemas/definitions/flow/forEachInteger) "
                    },
                    "step": {
                        "description": "The number by which to increase or decrease the `forEach` iterator integer.\n",
                        "default": 1,
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "$ref": "#/definitions/memberName"
                            }
                        ],
                        "markdownDescription": "The number by which to increase or decrease the `forEach` iterator integer.\n\n\nSee more: [For Each Integer Schema](https://schema.laboperator.com/schemas/definitions/flow/forEachInteger) "
                    },
                    "to": {
                        "description": "The limit value at which the flow execution will break out of the loop.\nThe check will be done exclusively.\n\nFor example, given the following definition:\n\n```yml\nforEach: iterator\nto: 5\ndo: something\n```\n\nThe iteration will happens 5 times, during which the `iterator` field will be\nassigned the value of 0,1,2,3, and 4 respectively.\n",
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "$ref": "#/definitions/memberName"
                            }
                        ],
                        "markdownDescription": "The limit value at which the flow execution will break out of the loop.\nThe check will be done exclusively.\n\nFor example, given the following definition:\n\n```\nforEach: iterator\nto: 5\ndo: something\n```\n\nThe iteration will happens 5 times, during which the `iterator` field will be\nassigned the value of 0,1,2,3, and 4 respectively.\n\n\nSee more: [For Each Integer Schema](https://schema.laboperator.com/schemas/definitions/flow/forEachInteger) "
                    },
                    "do": {
                        "$ref": "#/definitions/flow/flowControl"
                    }
                },
                "examples": [
                    {
                        "forEach": "iterator",
                        "to": 10,
                        "do": [
                            "step1",
                            "step2"
                        ]
                    },
                    {
                        "forEach": "iterator",
                        "step": 2,
                        "to": 10,
                        "do": [
                            "step1",
                            "step2"
                        ]
                    },
                    {
                        "forEach": "iterator",
                        "step": "iterator",
                        "to": "boundary",
                        "do": [
                            "step1",
                            "step2"
                        ]
                    }
                ],
                "markdownDescription": "An iteration flow of steps or nested flow control schemas.\nThe loop will be iterated up to the given limit of an iterator integer.\n\n\nSee more: [For Each Integer Schema](https://schema.laboperator.com/schemas/definitions/flow/forEachInteger) "
            },
            "if": {
                "type": "object",
                "title": "If-Then-Else  Flow",
                "description": "A conditional flow of steps or nested flow control schemas. In the well known if-then-else fashion a conditional flow through the workflow can be implemented.\n",
                "required": [
                    "if",
                    "then"
                ],
                "additionalProperties": false,
                "properties": {
                    "if": {
                        "$ref": "#/definitions/script",
                        "description": "The condition has access to all global fields of the workflow. Local step fields cannot be referenced in a condition. Any string result or numerical result other then zero will be considered truthy and trigger execution of the `then` workflow. A falsy value will trigger execution of the `else` workflow.\n",
                        "markdownDescription": "The condition has access to all global fields of the workflow. Local step fields cannot be referenced in a condition. Any string result or numerical result other then zero will be considered truthy and trigger execution of the `then` workflow. A falsy value will trigger execution of the `else` workflow.\n\n\nSee more: [If Schema](https://schema.laboperator.com/schemas/definitions/flow/if) "
                    },
                    "then": {
                        "$ref": "#/definitions/flow/flowControl"
                    },
                    "else": {
                        "$ref": "#/definitions/flow/flowControl"
                    }
                },
                "examples": [
                    {
                        "if": "field1 > 100",
                        "then": [
                            "step1",
                            "step2"
                        ],
                        "else": "step3"
                    },
                    {
                        "if": "field1 != field2",
                        "then": "step3"
                    }
                ],
                "markdownDescription": "A conditional flow of steps or nested flow control schemas. In the well known if-then-else fashion a conditional flow through the workflow can be implemented.\n\n\nSee more: [If Schema](https://schema.laboperator.com/schemas/definitions/flow/if) "
            },
            "loop": {
                "type": "object",
                "title": "Loop Flow",
                "description": "A loop flow of steps or nested flow control schemas. The loop will be repeated until a condition is met. The loop will be executed at least once. Once the condition evaluates to a truthy value the loop is broken and the loop flow is considered completed.\n",
                "required": [
                    "loop",
                    "until"
                ],
                "additionalProperties": false,
                "properties": {
                    "loop": {
                        "$ref": "#/definitions/flow/flowControl"
                    },
                    "until": {
                        "$ref": "#/definitions/script",
                        "description": "The condition has access to all global fields of the workflow. Local step fields cannot be referenced in a condition. Any string result or numerical result other then zero will be considered truthy and trigger execution of the `then` workflow. A falsy value will trigger execution of the `else` workflow.\n",
                        "markdownDescription": "The condition has access to all global fields of the workflow. Local step fields cannot be referenced in a condition. Any string result or numerical result other then zero will be considered truthy and trigger execution of the `then` workflow. A falsy value will trigger execution of the `else` workflow.\n\n\nSee more: [Loop Schema](https://schema.laboperator.com/schemas/definitions/flow/loop) "
                    }
                },
                "examples": [
                    {
                        "loop": [
                            "step1",
                            "step2"
                        ],
                        "until": "field1 > 100"
                    },
                    {
                        "loop": "step3",
                        "until": "field1 != field2"
                    }
                ],
                "markdownDescription": "A loop flow of steps or nested flow control schemas. The loop will be repeated until a condition is met. The loop will be executed at least once. Once the condition evaluates to a truthy value the loop is broken and the loop flow is considered completed.\n\n\nSee more: [Loop Schema](https://schema.laboperator.com/schemas/definitions/flow/loop) "
            },
            "sequential": {
                "type": "array",
                "title": "Sequential Flow",
                "description": "A sequence steps or nested flow control schemas. In a sequential flow consecutive items will always be executed one after another. Therefore, a nested flow has to be completed before a consecutive item can be started. The sequential flow is the only implicit flow, meaning it does not have any key words or properties. It is typically used as the top-level flow control in a workflow.\n",
                "items": {
                    "$ref": "#/definitions/flow/flowControl"
                },
                "examples": [
                    [
                        "step1",
                        "step2"
                    ],
                    [
                        "step1",
                        {
                            "step2": {
                                "option": "value"
                            }
                        }
                    ],
                    [
                        "step1",
                        {
                            "while": "condition",
                            "do": [
                                "step2"
                            ]
                        },
                        "step3"
                    ]
                ],
                "markdownDescription": "A sequence steps or nested flow control schemas. In a sequential flow consecutive items will always be executed one after another. Therefore, a nested flow has to be completed before a consecutive item can be started. The sequential flow is the only implicit flow, meaning it does not have any key words or properties. It is typically used as the top-level flow control in a workflow.\n\n\nSee more: [Sequential Schema](https://schema.laboperator.com/schemas/definitions/flow/sequential) "
            },
            "stepObject": {
                "type": "object",
                "title": "A step call object",
                "description": "A step call object is the more sophisticated variant of a step identifier\nallowing to pass additional parameters to a step being called.\n",
                "maxProperties": 1,
                "minProperties": 1,
                "propertyNames": {
                    "$ref": "#/definitions/stepIdentifier"
                },
                "additionalProperties": {
                    "type": "object",
                    "minProperties": 1,
                    "additionalProperties": false,
                    "properties": {
                        "title": {
                            "type": "string",
                            "description": "Overrides the step title of the step definition. This is useful to\ncustomize the title of a generic step for each invocation when it is\nreused multiple times during the workflow.\n",
                            "markdownDescription": "Overrides the step title of the step definition. This is useful to\ncustomize the title of a generic step for each invocation when it is\nreused multiple times during the workflow.\n\n\nSee more: [Step Object Schema](https://schema.laboperator.com/schemas/definitions/flow/stepObject) "
                        },
                        "fields": {
                            "$ref": "#/definitions/fieldValues"
                        },
                        "fieldMapping": {
                            "$ref": "#/definitions/fieldMapping"
                        }
                    }
                },
                "markdownDescription": "A step call object is the more sophisticated variant of a step identifier\nallowing to pass additional parameters to a step being called.\n\n\nSee more: [Step Object Schema](https://schema.laboperator.com/schemas/definitions/flow/stepObject) "
            },
            "while": {
                "type": "object",
                "title": "While Flow",
                "description": "A while loop flow of steps or nested flow control schemas. The while loop will be repeated as long as a condition is met. The while loop will never be executed if the conditions evaluates to false initially. Once the condition evaluates to a falsy value the loop is broken and the while loop flow is considered completed.\n",
                "required": [
                    "while",
                    "do"
                ],
                "additionalProperties": false,
                "properties": {
                    "while": {
                        "$ref": "#/definitions/script",
                        "description": "The condition has access to all global fields of the workflow. Local step fields cannot be referenced in a condition. Any string result or numerical result other then zero will be considered truthy and trigger execution of the `then` workflow. A falsy value will trigger execution of the `else` workflow.\n",
                        "markdownDescription": "The condition has access to all global fields of the workflow. Local step fields cannot be referenced in a condition. Any string result or numerical result other then zero will be considered truthy and trigger execution of the `then` workflow. A falsy value will trigger execution of the `else` workflow.\n\n\nSee more: [While Schema](https://schema.laboperator.com/schemas/definitions/flow/while) "
                    },
                    "do": {
                        "$ref": "#/definitions/flow/flowControl"
                    }
                },
                "examples": [
                    {
                        "while": "field1 > 100",
                        "do": [
                            "step1",
                            "step2"
                        ]
                    },
                    {
                        "while": "field1 != field2",
                        "do": "step3"
                    }
                ],
                "markdownDescription": "A while loop flow of steps or nested flow control schemas. The while loop will be repeated as long as a condition is met. The while loop will never be executed if the conditions evaluates to false initially. Once the condition evaluates to a falsy value the loop is broken and the while loop flow is considered completed.\n\n\nSee more: [While Schema](https://schema.laboperator.com/schemas/definitions/flow/while) "
            }
        },
        "step": {
            "deviceObject": {
                "type": "object",
                "title": "Device Object Schema",
                "description": "Used to pass arguments to an step device.",
                "maxProperties": 1,
                "minProperties": 1,
                "propertyNames": {
                    "$ref": "#/definitions/memberName"
                },
                "additionalProperties": {
                    "type": "object",
                    "minProperties": 1,
                    "properties": {
                        "image": {
                            "type": "string",
                            "format": "uri-reference",
                            "description": "A url to an image that should be displayed instead of the devices icon.\n",
                            "markdownDescription": "A url to an image that should be displayed instead of the devices icon.\n\n\nSee more: [Device Object Schema](https://schema.laboperator.com/schemas/definitions/step/deviceObject) "
                        }
                    }
                },
                "markdownDescription": "Used to pass arguments to an step device.\n\nSee more: [Device Object Schema](https://schema.laboperator.com/schemas/definitions/step/deviceObject) "
            },
            "element": {
                "type": "object",
                "title": "Element Schema",
                "description": "Elements are used to display data points over a certain period.\n",
                "required": [
                    "type"
                ],
                "oneOf": [
                    {
                        "required": [
                            "dataScope"
                        ]
                    },
                    {
                        "anyOf": [
                            {
                                "required": [
                                    "scope"
                                ]
                            },
                            {
                                "required": [
                                    "inputChannels"
                                ]
                            }
                        ]
                    },
                    {
                        "not": {
                            "anyOf": [
                                {
                                    "required": [
                                        "dataScope"
                                    ]
                                },
                                {
                                    "required": [
                                        "scope"
                                    ]
                                },
                                {
                                    "required": [
                                        "inputChannels"
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "BinaryState",
                            "Button",
                            "Clock",
                            "ConsoleFeed",
                            "Content",
                            "DeviceChannelTable",
                            "DeviceInfo",
                            "Display",
                            "FileTable",
                            "Gauge",
                            "GaugeControl",
                            "JsonTable",
                            "LineChart",
                            "MultiState",
                            "NumberInput",
                            "Separator",
                            "StringInput",
                            "StringLog",
                            "Switch",
                            "Table",
                            "Webcam",
                            "WebPage"
                        ],
                        "description": "The type of the element.",
                        "markdownDescription": "The type of the element.\n\nSee more: [Element Schema](https://schema.laboperator.com/schemas/definitions/step/element) "
                    },
                    "elementLabel": {
                        "type": "object",
                        "properties": {
                            "text": {
                                "type": "string",
                                "description": "Labels are displayed alongside the element and can help users better understand the displayed data.",
                                "markdownDescription": "Labels are displayed alongside the element and can help users better understand the displayed data.\n\nSee more: [Element Schema](https://schema.laboperator.com/schemas/definitions/step/element) "
                            }
                        }
                    },
                    "height": {
                        "type": "number",
                        "description": "The fixed height of the element measured in pixels.",
                        "markdownDescription": "The fixed height of the element measured in pixels.\n\nSee more: [Element Schema](https://schema.laboperator.com/schemas/definitions/step/element) "
                    },
                    "grid": {
                        "description": "The responsive width of the element. The value is the number of columns that the element should occupy based on a 12-column grid layout.\n\nThere are 5 breakpoints allowing to define multiple width values for different screen sizes.\n\nA single number may be provided and applied to all breakpoints if there is no reason to resize the element for different screen sizes.\n",
                        "oneOf": [
                            {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "number",
                                    "minimum": 1,
                                    "maximum": 12
                                },
                                "propertyNames": {
                                    "enum": [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl"
                                    ]
                                }
                            },
                            {
                                "type": "number",
                                "minimum": 1,
                                "maximum": 12
                            }
                        ],
                        "markdownDescription": "The responsive width of the element. The value is the number of columns that the element should occupy based on a 12-column grid layout.\n\nThere are 5 breakpoints allowing to define multiple width values for different screen sizes.\n\nA single number may be provided and applied to all breakpoints if there is no reason to resize the element for different screen sizes.\n\n\nSee more: [Element Schema](https://schema.laboperator.com/schemas/definitions/step/element) "
                    },
                    "dataScope": {
                        "type": "object",
                        "$ref": "#/definitions/memberName",
                        "description": "Scope of a measurement",
                        "markdownDescription": "Scope of a measurement\n\nSee more: [Element Schema](https://schema.laboperator.com/schemas/definitions/step/element) "
                    },
                    "inputChannels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/step/element_objects/inputChannel"
                        },
                        "description": "List of channels",
                        "markdownDescription": "List of channels\n\nSee more: [Element Schema](https://schema.laboperator.com/schemas/definitions/step/element) "
                    },
                    "id": {
                        "description": "Can be used to render the element inside text (e.g. substep description)\nin the format {{element|memberName}}.\nFor example, when id is defined as \"rotationGauge\" the text may look like:\n\nUse this view to monitor the stirring speed {{element|rotationGauge}}\n",
                        "$ref": "#/definitions/memberName",
                        "markdownDescription": "Can be used to render the element inside text (e.g. substep description)\nin the format {{element|memberName}}.\nFor example, when id is defined as \"rotationGauge\" the text may look like:\n\nUse this view to monitor the stirring speed {{element|rotationGauge}}\n\n\nSee more: [Element Schema](https://schema.laboperator.com/schemas/definitions/step/element) "
                    },
                    "placement": {
                        "description": "When set to `manual` the element won't be displayed in the substep. To render the element it has to be referenced inside the description markdown: `{{element|rotationGauge}}`. Replace `rotationGauge` with the\nvalue of the `id` property from your element definition.\n",
                        "type": "string",
                        "enum": [
                            "manual",
                            "default"
                        ],
                        "markdownDescription": "When set to `manual` the element won't be displayed in the substep. To render the element it has to be referenced inside the description markdown: `{{element|rotationGauge}}`. Replace `rotationGauge` with the\nvalue of the `id` property from your element definition.\n\n\nSee more: [Element Schema](https://schema.laboperator.com/schemas/definitions/step/element) "
                    },
                    "description": {
                        "type": "string"
                    },
                    "settings": {
                        "description": "Additional settings.",
                        "type": "object",
                        "markdownDescription": "Additional settings.\n\nSee more: [Element Schema](https://schema.laboperator.com/schemas/definitions/step/element) "
                    }
                },
                "markdownDescription": "Elements are used to display data points over a certain period.\n\n\nSee more: [Element Schema](https://schema.laboperator.com/schemas/definitions/step/element) "
            },
            "selector": {
                "type": "object",
                "title": "Selector Schema",
                "description": "The schema of a selector. The options defined will be available\nfor selection in the substep during a workflow run. A selector can be customized\nwith different layouts, currently list or cards. They support both multi- and single-selection.\nBy overwriting the default behaviors they can be completely customized.\n",
                "additionalProperties": false,
                "required": [
                    "options"
                ],
                "properties": {
                    "layout": {
                        "type": "string",
                        "description": "The layout of the selector. Supported layouts are list and cards.\nYou can change layouts during selection on the workflow run without affecting the value defined in the template.\n",
                        "enum": [
                            "cards",
                            "list"
                        ],
                        "default": "list",
                        "markdownDescription": "The layout of the selector. Supported layouts are list and cards.\nYou can change layouts during selection on the workflow run without affecting the value defined in the template.\n\n\nSee more: [Selector Schema](https://schema.laboperator.com/schemas/definitions/step/selector) "
                    },
                    "result": {
                        "description": "Define the field that will receive the value of the selected option.",
                        "$ref": "#/definitions/memberName",
                        "markdownDescription": "Define the field that will receive the value of the selected option.\n\nSee more: [Selector Schema](https://schema.laboperator.com/schemas/definitions/step/selector) "
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the selector.",
                        "default": "Selection",
                        "markdownDescription": "The title of the selector.\n\nSee more: [Selector Schema](https://schema.laboperator.com/schemas/definitions/step/selector) "
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the selector. Add any fancy description you want, we support __Markdown__!\n",
                        "default": "Select one of the options below.",
                        "markdownDescription": "The description of the selector. Add any fancy description you want, we support __Markdown__!\n\n\nSee more: [Selector Schema](https://schema.laboperator.com/schemas/definitions/step/selector) "
                    },
                    "multiSelection": {
                        "type": "boolean",
                        "description": "Defines if the selector allows the selection of more than one option.",
                        "default": false,
                        "markdownDescription": "Defines if the selector allows the selection of more than one option.\n\nSee more: [Selector Schema](https://schema.laboperator.com/schemas/definitions/step/selector) "
                    },
                    "skipBehaviors": {
                        "type": "boolean",
                        "description": "Defines if the default behaviors of the substep should be skipped or not.\nThe default behavior of a selector is to set the value of the selected option(s) on the result field and complete the substep.\nIf you set this option to true, you need to add behaviors, either in the substep or step level, and one of the actions must be the SET_FIELD.\n",
                        "default": false,
                        "markdownDescription": "Defines if the default behaviors of the substep should be skipped or not.\nThe default behavior of a selector is to set the value of the selected option(s) on the result field and complete the substep.\nIf you set this option to true, you need to add behaviors, either in the substep or step level, and one of the actions must be the SET_FIELD.\n\n\nSee more: [Selector Schema](https://schema.laboperator.com/schemas/definitions/step/selector) "
                    },
                    "options": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/memberName"
                            },
                            {
                                "$ref": "#/definitions/step/selectorOptions"
                            },
                            {
                                "type": "object",
                                "minProperties": 1,
                                "maxProperties": 1,
                                "propertyNames": {
                                    "$ref": "#/definitions/memberName"
                                },
                                "additionalProperties": {
                                    "$ref": "#/definitions/step/selectorAccessors"
                                }
                            }
                        ]
                    }
                },
                "markdownDescription": "The schema of a selector. The options defined will be available\nfor selection in the substep during a workflow run. A selector can be customized\nwith different layouts, currently list or cards. They support both multi- and single-selection.\nBy overwriting the default behaviors they can be completely customized.\n\n\nSee more: [Selector Schema](https://schema.laboperator.com/schemas/definitions/step/selector) "
            },
            "selectorAccessors": {
                "type": "object",
                "minProperties": 1,
                "additionalProperties": false,
                "description": "Define accessors for selector options. You can map the selector options to fields defined in a field.\n",
                "properties": {
                    "primary": {
                        "type": "string",
                        "description": "The primary text of the option.\n",
                        "markdownDescription": "The primary text of the option.\n\n\nSee more: [Selector Accessors Schema](https://schema.laboperator.com/schemas/definitions/step/selectorAccessors) "
                    },
                    "secondary": {
                        "type": "string",
                        "description": "The secondary text of the option.",
                        "markdownDescription": "The secondary text of the option.\n\nSee more: [Selector Accessors Schema](https://schema.laboperator.com/schemas/definitions/step/selectorAccessors) "
                    },
                    "thumbnail": {
                        "type": "string",
                        "description": "The URL of the image that will be used as the thumbnail of the option.\n",
                        "markdownDescription": "The URL of the image that will be used as the thumbnail of the option.\n\n\nSee more: [Selector Accessors Schema](https://schema.laboperator.com/schemas/definitions/step/selectorAccessors) "
                    },
                    "value": {
                        "type": "string",
                        "description": "The value that will be used if the option is selected.",
                        "markdownDescription": "The value that will be used if the option is selected.\n\nSee more: [Selector Accessors Schema](https://schema.laboperator.com/schemas/definitions/step/selectorAccessors) "
                    }
                },
                "examples": [
                    {
                        "primary": "name",
                        "secondary": "category.name",
                        "description": "summary",
                        "thumbnail": "category.image.url",
                        "markdownDescription": "summary\n\nSee more: [Selector Accessors Schema](https://schema.laboperator.com/schemas/definitions/step/selectorAccessors) "
                    }
                ],
                "markdownDescription": "Define accessors for selector options. You can map the selector options to fields defined in a field.\n\n\nSee more: [Selector Accessors Schema](https://schema.laboperator.com/schemas/definitions/step/selectorAccessors) "
            },
            "selectorOptions": {
                "type": "array",
                "items": {
                    "type": "object",
                    "description": "A static array of options available for selection.",
                    "additionalProperties": false,
                    "required": [
                        "primary",
                        "value"
                    ],
                    "properties": {
                        "primary": {
                            "type": "string",
                            "description": "The primary text of the option.\n",
                            "markdownDescription": "The primary text of the option.\n\n\nSee more: [Selector Options Schema](https://schema.laboperator.com/schemas/definitions/step/selectorOptions) "
                        },
                        "secondary": {
                            "type": "string",
                            "description": "The secondary text of the option.",
                            "markdownDescription": "The secondary text of the option.\n\nSee more: [Selector Options Schema](https://schema.laboperator.com/schemas/definitions/step/selectorOptions) "
                        },
                        "thumbnail": {
                            "type": "string",
                            "format": "uri",
                            "description": "The URL of the image that will be used as the thumbnail of the option.\n",
                            "markdownDescription": "The URL of the image that will be used as the thumbnail of the option.\n\n\nSee more: [Selector Options Schema](https://schema.laboperator.com/schemas/definitions/step/selectorOptions) "
                        },
                        "value": {
                            "type": "string",
                            "description": "The value that will be used if the option is selected.",
                            "markdownDescription": "The value that will be used if the option is selected.\n\nSee more: [Selector Options Schema](https://schema.laboperator.com/schemas/definitions/step/selectorOptions) "
                        }
                    },
                    "markdownDescription": "A static array of options available for selection.\n\nSee more: [Selector Options Schema](https://schema.laboperator.com/schemas/definitions/step/selectorOptions) "
                }
            },
            "substep": {
                "type": "object",
                "title": "Substep Schema",
                "description": "A substep is a single instruction of a step and can both content and actions\nattached to it.\n",
                "required": [
                    "primary"
                ],
                "additionalProperties": false,
                "properties": {
                    "primary": {
                        "type": "string",
                        "maxLength": 200,
                        "title": "Primary Instruction",
                        "description": "The primary line of instructions. Field values can be embedded by\nenclosing a field identifier in double curly braces.\n",
                        "examples": [
                            "Place {{sample}} on {{balance}}."
                        ],
                        "markdownDescription": "The primary line of instructions. Field values can be embedded by\nenclosing a field identifier in double curly braces.\n\n\nSee more: [Substep Schema](https://schema.laboperator.com/schemas/definitions/step/substep) "
                    },
                    "secondary": {
                        "type": "string",
                        "maxLength": 100,
                        "title": "Secondary Instruction",
                        "description": "The secondary line of instructions.",
                        "examples": [
                            "Caution! {{sample}} is super expensive..."
                        ],
                        "markdownDescription": "The secondary line of instructions.\n\nSee more: [Substep Schema](https://schema.laboperator.com/schemas/definitions/step/substep) "
                    },
                    "description": {
                        "title": "Description",
                        "$ref": "#/definitions/markdown",
                        "description": "The description fields can be used to add details to the substep. As it\nsupports markdown, you can use basic formatting, links, tables and even\nimages.\n",
                        "markdownDescription": "The description fields can be used to add details to the substep. As it\nsupports markdown, you can use basic formatting, links, tables and even\nimages.\n\n\nSee more: [Substep Schema](https://schema.laboperator.com/schemas/definitions/step/substep) "
                    },
                    "expandDescription": {
                        "type": "boolean",
                        "default": false,
                        "title": "Initially expand the description?",
                        "description": "A flag to indicate whether or not to show the entire description for\nthis substep right away.\n\nThe default is `false`, which will cause only the first line of the\ndescription to be visible. Of course the user can always decide to\nexpand the description when required.\n\nNot expanding the description by default keeps your workflow interface\nclean and the user can get a good overview of the substeps, while an\nexpanded descriptoin will make sure an important notes or images you\nmight have put in the description will be shown.\n",
                        "markdownDescription": "A flag to indicate whether or not to show the entire description for\nthis substep right away.\n\nThe default is `false`, which will cause only the first line of the\ndescription to be visible. Of course the user can always decide to\nexpand the description when required.\n\nNot expanding the description by default keeps your workflow interface\nclean and the user can get a good overview of the substeps, while an\nexpanded descriptoin will make sure an important notes or images you\nmight have put in the description will be shown.\n\n\nSee more: [Substep Schema](https://schema.laboperator.com/schemas/definitions/step/substep) "
                    },
                    "confirm": {
                        "type": "boolean",
                        "default": false,
                        "title": "Show manual confirmation button?",
                        "description": "Display a manual confirmation button to complete the substep.",
                        "markdownDescription": "Display a manual confirmation button to complete the substep.\n\nSee more: [Substep Schema](https://schema.laboperator.com/schemas/definitions/step/substep) "
                    },
                    "inputs": {
                        "type": "array",
                        "title": "Substep Inputs",
                        "description": "A list of fields to show inputs for on the substep. For each field the\nsubstep will display an appropriate input component.\n\nUse the title and description properties of the field schema to control\nthe label and help text of an input.\n",
                        "items": {
                            "$ref": "#/definitions/memberName",
                            "description": "The identifier of a field defined in the step.",
                            "markdownDescription": "The identifier of a field defined in the step.\n\nSee more: [Substep Schema](https://schema.laboperator.com/schemas/definitions/step/substep) "
                        },
                        "markdownDescription": "A list of fields to show inputs for on the substep. For each field the\nsubstep will display an appropriate input component.\n\nUse the title and description properties of the field schema to control\nthe label and help text of an input.\n\n\nSee more: [Substep Schema](https://schema.laboperator.com/schemas/definitions/step/substep) "
                    },
                    "buttons": {
                        "type": "array",
                        "title": "Substep Buttons",
                        "description": "A list of buttons on the substep.",
                        "items": {
                            "$ref": "#/definitions/button"
                        },
                        "markdownDescription": "A list of buttons on the substep.\n\nSee more: [Substep Schema](https://schema.laboperator.com/schemas/definitions/step/substep) "
                    },
                    "devices": {
                        "type": "array",
                        "title": "Substep Devices",
                        "description": "A list of fields to display as devices on the substep. For each device\nthe substep will display general information, status and activities such\nas invoked commands.\n",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/definitions/memberName",
                                    "description": "The identifier of a field that is a device or channel relation.\n",
                                    "markdownDescription": "The identifier of a field that is a device or channel relation.\n\n\nSee more: [Substep Schema](https://schema.laboperator.com/schemas/definitions/step/substep) "
                                },
                                {
                                    "$ref": "#/definitions/step/deviceObject"
                                }
                            ]
                        },
                        "markdownDescription": "A list of fields to display as devices on the substep. For each device\nthe substep will display general information, status and activities such\nas invoked commands.\n\n\nSee more: [Substep Schema](https://schema.laboperator.com/schemas/definitions/step/substep) "
                    },
                    "elements": {
                        "type": "array",
                        "title": "Substep Data Elements",
                        "description": "Data elements allow to render data from device channels on the substep.\n",
                        "items": {
                            "$ref": "#/definitions/step/element"
                        },
                        "markdownDescription": "Data elements allow to render data from device channels on the substep.\n\n\nSee more: [Substep Schema](https://schema.laboperator.com/schemas/definitions/step/substep) "
                    },
                    "timer": {
                        "title": "Substep Timer",
                        "description": "A timer to display on the substep. The timer can be started using\ndisplayed buttons or using actions.\nWith no default_duration given or duration set to 00:00 it can be used\nas a stop watch.\n\nFor full flexibility the timer can either implicitly define a field and\nbehaviors to handle the manual buttons or you can a define timer field\nin the `/fields` section of the step or the workflow manually and\nreference it here.\n\nBehaviors to handle the buttons on the timer are automatically created\nfor you. To skip creation of these behaviors, pass the `skipBehavior`\nflag to the timer definition.\n",
                        "oneOf": [
                            {
                                "$ref": "#/definitions/memberName"
                            },
                            {
                                "$ref": "#/definitions/field_schema/timer"
                            }
                        ],
                        "examples": [
                            "myTimer",
                            {
                                "type": "timer",
                                "defaultDuration": 2000
                            }
                        ],
                        "markdownDescription": "A timer to display on the substep. The timer can be started using\ndisplayed buttons or using actions.\nWith no default_duration given or duration set to 00:00 it can be used\nas a stop watch.\n\nFor full flexibility the timer can either implicitly define a field and\nbehaviors to handle the manual buttons or you can a define timer field\nin the `/fields` section of the step or the workflow manually and\nreference it here.\n\nBehaviors to handle the buttons on the timer are automatically created\nfor you. To skip creation of these behaviors, pass the `skipBehavior`\nflag to the timer definition.\n\n\nSee more: [Substep Schema](https://schema.laboperator.com/schemas/definitions/step/substep) "
                    },
                    "behaviors": {
                        "$ref": "#/definitions/workflow_template/behaviors"
                    },
                    "selector": {
                        "$ref": "#/definitions/step/selector"
                    }
                },
                "markdownDescription": "A substep is a single instruction of a step and can both content and actions\nattached to it.\n\n\nSee more: [Substep Schema](https://schema.laboperator.com/schemas/definitions/step/substep) "
            },
            "table": {
                "type": "object",
                "title": "Table Schema",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/definitions/memberName",
                        "description": "The unique identifier of a field that contains the source data.\n\nIf configuration for `tabs` or `columns` is not specified, the data source is expected to be an array of objects. Each object represents one row in the table. The order of rows in the table is defined by the array indices. The object properties define the cell values within that row. For example, the following source data would result in a table with three columns and two rows:\n\n```yml\n- name: acetic anhydride\n  density: 1.08\n  molar_mass: 102.09\n- name: 2-Hydroxybenzoic acid\n  density: 1.44\n  molar_mass: 138.121\n```\n\nConfiguration for `tabs` or `columns` can be provided for mapping a data source that is not an array of objects.\nWith `tabs` you can split the source data into separate tables in separate tabs. Mapping on where to find the data for each tab must be defined in the `tabs.rows` setting.\nThe `columns` setting enables fine-grained control over the structure of a table and the formatting of cell values. If `columns` is not specified, rows must be represented by objects in the source data.\n\nExamples for when the source data is:\n\n1. Array of arrays:\n\n- table configuration:\n\n```yml\ncolumns:\n  - label: Name\n    value: '/name'\n  - label: Density\n    value: '/density'\ntabs:\n  - rows: '/0'\n  - rows: '/1'\n```\n\n- sample data:\n\n```yml\n- - name: acetic anhydride\n    density: 1.08\n    molar_mass: 102.09\n  - name: 2-Hydroxybenzoic acid\n    density: 1.44\n    molar_mass: 138.121\n- - name: salicylic acid\n    density: 1.44\n    molar_mass: 138.12\n  - name: 2,4,6-Trichlorphenol\n    density: 1,68\n    molar_mass: 197,45\n```\n\n2. Array of objects:\n\n- table configuration:\n\n```yml\ncolumns:\n  - label: Name\n    value: /name\n  - label: Factor\n    value: /factor\ntabs:\n  - rows: /0/determinations\n  - rows: /1/determinations\n```\n\n- sample data:\n\n```yml\n- name: First Dilution\n  determinations:\n    - name: acetic anhydride\n      factor: 2\n      weight: 102.09\n    - name: 2-Hydroxybenzoic acid\n      factor: 2\n      weight: 138.121\n- name: Second Dilution\n  determinations:\n    - name: acetic anhydride\n      factor: 4\n      weight: 80.25\n    - name: 2-Hydroxybenzoic acid\n      factor: 4\n      weight: 108.457\n```\n",
                        "examples": [
                            "my_table_data"
                        ],
                        "markdownDescription": "The unique identifier of a field that contains the source data.\n\nIf configuration for `tabs` or `columns` is not specified, the data source is expected to be an array of objects. Each object represents one row in the table. The order of rows in the table is defined by the array indices. The object properties define the cell values within that row. For example, the following source data would result in a table with three columns and two rows:\n\n```\n- name: acetic anhydride\n  density: 1.08\n  molar_mass: 102.09\n- name: 2-Hydroxybenzoic acid\n  density: 1.44\n  molar_mass: 138.121\n```\n\nConfiguration for `tabs` or `columns` can be provided for mapping a data source that is not an array of objects.\nWith `tabs` you can split the source data into separate tables in separate tabs. Mapping on where to find the data for each tab must be defined in the `tabs.rows` setting.\nThe `columns` setting enables fine-grained control over the structure of a table and the formatting of cell values. If `columns` is not specified, rows must be represented by objects in the source data.\n\nExamples for when the source data is:\n\n1. Array of arrays:\n\n- table configuration:\n\n```\ncolumns:\n  - label: Name\n    value: '/name'\n  - label: Density\n    value: '/density'\ntabs:\n  - rows: '/0'\n  - rows: '/1'\n```\n\n- sample data:\n\n```\n- - name: acetic anhydride\n    density: 1.08\n    molar_mass: 102.09\n  - name: 2-Hydroxybenzoic acid\n    density: 1.44\n    molar_mass: 138.121\n- - name: salicylic acid\n    density: 1.44\n    molar_mass: 138.12\n  - name: 2,4,6-Trichlorphenol\n    density: 1,68\n    molar_mass: 197,45\n```\n\n2. Array of objects:\n\n- table configuration:\n\n```\ncolumns:\n  - label: Name\n    value: /name\n  - label: Factor\n    value: /factor\ntabs:\n  - rows: /0/determinations\n  - rows: /1/determinations\n```\n\n- sample data:\n\n```\n- name: First Dilution\n  determinations:\n    - name: acetic anhydride\n      factor: 2\n      weight: 102.09\n    - name: 2-Hydroxybenzoic acid\n      factor: 2\n      weight: 138.121\n- name: Second Dilution\n  determinations:\n    - name: acetic anhydride\n      factor: 4\n      weight: 80.25\n    - name: 2-Hydroxybenzoic acid\n      factor: 4\n      weight: 108.457\n```\n\n\nSee more: [Table Schema](https://schema.laboperator.com/schemas/definitions/step/table) "
                    },
                    "tabs": {
                        "type": "array",
                        "description": "A static array that defines the structure of tabs that contain separate tables.\n",
                        "items": {
                            "type": "object",
                            "description": "The properties of each individual tab.",
                            "required": [
                                "rows"
                            ],
                            "properties": {
                                "rows": {
                                    "$ref": "#/definitions/jsonPointer",
                                    "description": "The pointer to the array that holds the rows data for each tab. The path is resolved relative to the table `data` field.\n",
                                    "markdownDescription": "The pointer to the array that holds the rows data for each tab. The path is resolved relative to the table `data` field.\n\n\nSee more: [Table Schema](https://schema.laboperator.com/schemas/definitions/step/table) "
                                },
                                "label": {
                                    "type": "string",
                                    "description": "The display name of the tab. If no label is specified, the default `Tab #` label will be used, with `#` indicating the respective tab index.\n",
                                    "default": "Tab #",
                                    "examples": [
                                        "Weighing Experiment",
                                        "Dilution 1"
                                    ],
                                    "markdownDescription": "The display name of the tab. If no label is specified, the default `Tab #` label will be used, with `#` indicating the respective tab index.\n\n\nSee more: [Table Schema](https://schema.laboperator.com/schemas/definitions/step/table) "
                                },
                                "selectable": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "rows",
                                            "cells"
                                        ]
                                    },
                                    "description": "Configures which table elements can be selected to trigger behaviors. It takes precedence over the table-wide `selectable` setting.\n",
                                    "markdownDescription": "Configures which table elements can be selected to trigger behaviors. It takes precedence over the table-wide `selectable` setting.\n\n\nSee more: [Table Schema](https://schema.laboperator.com/schemas/definitions/step/table) "
                                },
                                "columns": {
                                    "$ref": "#/definitions/step/table_attributes/columns"
                                },
                                "caption": {
                                    "type": "string",
                                    "description": "A caption functions like a heading for a table and provides information that can help users find and understand a table. It takes precedence over the table-wide `caption` setting.\n",
                                    "markdownDescription": "A caption functions like a heading for a table and provides information that can help users find and understand a table. It takes precedence over the table-wide `caption` setting.\n\n\nSee more: [Table Schema](https://schema.laboperator.com/schemas/definitions/step/table) "
                                }
                            },
                            "markdownDescription": "The properties of each individual tab.\n\nSee more: [Table Schema](https://schema.laboperator.com/schemas/definitions/step/table) "
                        },
                        "markdownDescription": "A static array that defines the structure of tabs that contain separate tables.\n\n\nSee more: [Table Schema](https://schema.laboperator.com/schemas/definitions/step/table) "
                    },
                    "dense": {
                        "type": "boolean",
                        "default": false,
                        "description": "Toggles a condensed appearance of a table with reduced spacing. If `textWrapping` is not disabled, rows will still increase in width in order to display long cell content with line breaks to avoid horizontal scrolling.\n",
                        "markdownDescription": "Toggles a condensed appearance of a table with reduced spacing. If `textWrapping` is not disabled, rows will still increase in width in order to display long cell content with line breaks to avoid horizontal scrolling.\n\n\nSee more: [Table Schema](https://schema.laboperator.com/schemas/definitions/step/table) "
                    },
                    "textWrapping": {
                        "type": "boolean",
                        "default": true,
                        "description": "Toggles line breaks inside table cells. If enabled, text will break into multiple lines so that it will fit into the available space and can be read from top to bottom without any horizontal scrolling.\nTables that are referenced in markdown with a flag to set the number of visible rows, i.e. `{{table|my_table|rows=3}}`, have text wrapping disabled by default.\n",
                        "markdownDescription": "Toggles line breaks inside table cells. If enabled, text will break into multiple lines so that it will fit into the available space and can be read from top to bottom without any horizontal scrolling.\nTables that are referenced in markdown with a flag to set the number of visible rows, i.e. `{{table|my_table|rows=3}}`, have text wrapping disabled by default.\n\n\nSee more: [Table Schema](https://schema.laboperator.com/schemas/definitions/step/table) "
                    },
                    "borders": {
                        "type": "boolean",
                        "default": false,
                        "description": "Toggles borders around each cell. The default appearance of a table is a border below every row.\n",
                        "markdownDescription": "Toggles borders around each cell. The default appearance of a table is a border below every row.\n\n\nSee more: [Table Schema](https://schema.laboperator.com/schemas/definitions/step/table) "
                    },
                    "alternatingRowColor": {
                        "type": "boolean",
                        "default": false,
                        "description": "Toggles a background color on odd rows to improve readability.\n",
                        "markdownDescription": "Toggles a background color on odd rows to improve readability.\n\n\nSee more: [Table Schema](https://schema.laboperator.com/schemas/definitions/step/table) "
                    },
                    "caption": {
                        "type": "string",
                        "description": "A caption functions like a heading for a table and provides information that can help users find and understand a table.\n",
                        "markdownDescription": "A caption functions like a heading for a table and provides information that can help users find and understand a table.\n\n\nSee more: [Table Schema](https://schema.laboperator.com/schemas/definitions/step/table) "
                    },
                    "selectable": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "rows",
                                "cells"
                            ]
                        },
                        "description": "Configures which table elements can be selected to trigger behaviors.\n",
                        "markdownDescription": "Configures which table elements can be selected to trigger behaviors.\n\n\nSee more: [Table Schema](https://schema.laboperator.com/schemas/definitions/step/table) "
                    },
                    "columns": {
                        "$ref": "#/definitions/step/table_attributes/columns"
                    },
                    "state": {
                        "$ref": "#/definitions/memberName",
                        "description": "The unique identifier of a field.\n\nThe state field will be created implicitly. The field name pattern consists of the table identifier and the string `_state`, joined end-to-end.\n\nA custom state field needs to conform to the following schema:\n\n```yml\ntype: object\nadditionalProperties: false\nproperties:\n  selectedRow:\n    type: string\n    description: The currently selected row.\n  selectedCell:\n    type: string\n    description: The currently selected cell.\n```\n",
                        "examples": [
                            "myTable_state"
                        ],
                        "markdownDescription": "The unique identifier of a field.\n\nThe state field will be created implicitly. The field name pattern consists of the table identifier and the string `_state`, joined end-to-end.\n\nA custom state field needs to conform to the following schema:\n\n```\ntype: object\nadditionalProperties: false\nproperties:\n  selectedRow:\n    type: string\n    description: The currently selected row.\n  selectedCell:\n    type: string\n    description: The currently selected cell.\n```\n\n\nSee more: [Table Schema](https://schema.laboperator.com/schemas/definitions/step/table) "
                    },
                    "skipBehaviors": {
                        "type": "boolean",
                        "default": false,
                        "description": "Toggles the automatic creation of behaviors for selecting table rows and cells\n",
                        "markdownDescription": "Toggles the automatic creation of behaviors for selecting table rows and cells\n\n\nSee more: [Table Schema](https://schema.laboperator.com/schemas/definitions/step/table) "
                    },
                    "rules": {
                        "$ref": "#/definitions/step/table_attributes/rules"
                    }
                }
            },
            "tableState": {
                "type": "object",
                "title": "Table State Schema",
                "description": "Dynamic data that describes the current behavior of the table based on any data of changes.\n",
                "additionalProperties": false,
                "properties": {
                    "selectedRow": {
                        "type": "string",
                        "description": "The currently selected row.",
                        "markdownDescription": "The currently selected row.\n\nSee more: [Table State Schema](https://schema.laboperator.com/schemas/definitions/step/tableState) "
                    },
                    "selectedCell": {
                        "type": "string",
                        "description": "The currently selected cell.",
                        "markdownDescription": "The currently selected cell.\n\nSee more: [Table State Schema](https://schema.laboperator.com/schemas/definitions/step/tableState) "
                    }
                },
                "markdownDescription": "Dynamic data that describes the current behavior of the table based on any data of changes.\n\n\nSee more: [Table State Schema](https://schema.laboperator.com/schemas/definitions/step/tableState) "
            },
            "tables": {
                "type": "object",
                "title": "Tables Schema",
                "description": "Tables display a collection of data in an ordered arrangement of rows and columns.\n\nIn markdown, tables can be referenced via their unique identifier:\n\n`{{table|my_table}}`\n\nAdditionally, you can define the number of visible rows for the table body. Example:\n\n`{{table|my_table|rows=3}}`\n\nThis will display the referenced table with the header row and its column labels, and the first three rows of the table body. Subsequent rows can be scrolled into view, while the table header remains in a fixed position. Limiting the number of visible rows is useful to save space on the UI for tables with many rows or when UI space is scarce in general. This setting prevents line breaks for all cell content in order to be able to calculate the height of the visible area. Consequently this comes with the potential trade-of of horizontal scrolling.\n",
                "propertyNames": {
                    "$ref": "#/definitions/memberName"
                },
                "additionalProperties": {
                    "$ref": "#/definitions/step/table"
                },
                "markdownDescription": "Tables display a collection of data in an ordered arrangement of rows and columns.\n\nIn markdown, tables can be referenced via their unique identifier:\n\n`{{table|my_table}}`\n\nAdditionally, you can define the number of visible rows for the table body. Example:\n\n`{{table|my_table|rows=3}}`\n\nThis will display the referenced table with the header row and its column labels, and the first three rows of the table body. Subsequent rows can be scrolled into view, while the table header remains in a fixed position. Limiting the number of visible rows is useful to save space on the UI for tables with many rows or when UI space is scarce in general. This setting prevents line breaks for all cell content in order to be able to calculate the height of the visible area. Consequently this comes with the potential trade-of of horizontal scrolling.\n\n\nSee more: [Tables Schema](https://schema.laboperator.com/schemas/definitions/step/tables) "
            },
            "webhookHandler": {
                "type": "object",
                "title": "Webhook handler Schema",
                "description": "The general schema of a webhook handler always consists of a `processor`\nand an `action`. Currently the processor supported is json\n",
                "required": [
                    "processor",
                    "do"
                ],
                "properties": {
                    "processor": {
                        "description": "Type of processor needed for handling the response",
                        "type": "string",
                        "enum": [
                            "json"
                        ],
                        "markdownDescription": "Type of processor needed for handling the response\n\nSee more: [Webhook Handler Schema](https://schema.laboperator.com/schemas/definitions/step/webhook_handler) "
                    },
                    "do": {
                        "$ref": "#/definitions/workflow_template/actions"
                    }
                },
                "markdownDescription": "The general schema of a webhook handler always consists of a `processor`\nand an `action`. Currently the processor supported is json\n\n\nSee more: [Webhook Handler Schema](https://schema.laboperator.com/schemas/definitions/step/webhook_handler) "
            },
            "element_objects": {
                "inputChannel": {
                    "type": "array",
                    "title": "Input Channels",
                    "description": "Input Channels\n",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/memberName"
                            },
                            {
                                "type": "object",
                                "required": [
                                    "device"
                                ],
                                "properties": {
                                    "device": {
                                        "$ref": "#/definitions/memberName"
                                    },
                                    "channels": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/definitions/memberName"
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "markdownDescription": "Input Channels\n\n\nSee more: [Input Channel Schema](https://schema.laboperator.com/schemas/definitions/step/element_objects/inputChannel) "
                },
                "scope": {
                    "type": "object",
                    "title": "Scope",
                    "description": "Scope of time for displaying data points\n",
                    "required": [
                        "type",
                        "params"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "enum": [
                                "limit",
                                "duration",
                                "range",
                                "open_range"
                            ]
                        }
                    },
                    "allOf": [
                        {
                            "if": null,
                            "properties": {
                                "type": {
                                    "const": "limit"
                                }
                            },
                            "then": {
                                "properties": {
                                    "params": {
                                        "type": "object",
                                        "description": "Fixed number of last data points that should be taken to the scope.\n",
                                        "properties": {
                                            "count": {
                                                "type": "number"
                                            }
                                        },
                                        "examples": [
                                            {
                                                "count": 1
                                            }
                                        ],
                                        "markdownDescription": "Fixed number of last data points that should be taken to the scope.\n\n\nSee more: [Scope Schema](https://schema.laboperator.com/schemas/definitions/step/element_objects/scope) "
                                    }
                                }
                            }
                        },
                        {
                            "if": null,
                            "properties": {
                                "type": {
                                    "const": "duration"
                                }
                            },
                            "then": {
                                "properties": {
                                    "params": {
                                        "$ref": "#/definitions/moment_duration",
                                        "description": "Duration till present time.",
                                        "examples": [
                                            [
                                                2,
                                                "minute"
                                            ],
                                            "P2M",
                                            {
                                                "seconds": 2,
                                                "minutes": 2
                                            }
                                        ],
                                        "markdownDescription": "Duration till present time.\n\nSee more: [Scope Schema](https://schema.laboperator.com/schemas/definitions/step/element_objects/scope) "
                                    }
                                }
                            }
                        },
                        {
                            "if": null,
                            "properties": {
                                "type": {
                                    "const": "range"
                                }
                            },
                            "then": {
                                "properties": {
                                    "params": {
                                        "type": "object",
                                        "description": "An interval from defined point in time till another specific moment or\ntill now if the last had not been defined.\n",
                                        "required": [
                                            "start_at",
                                            "end_at"
                                        ],
                                        "properties": {
                                            "start_at": {
                                                "oneOf": [
                                                    {
                                                        "$ref": "#/definitions/memberName"
                                                    },
                                                    {
                                                        "$ref": "#/definitions/timestamp"
                                                    }
                                                ]
                                            },
                                            "end_at": {
                                                "oneOf": [
                                                    {
                                                        "$ref": "#/definitions/memberName"
                                                    },
                                                    {
                                                        "$ref": "#/definitions/timestamp"
                                                    }
                                                ]
                                            }
                                        },
                                        "examples": [
                                            {
                                                "start_at": "2020-03-03T07:07:26.000Z",
                                                "end_at": "2020-03-03T08:15:26.000Z"
                                            }
                                        ],
                                        "markdownDescription": "An interval from defined point in time till another specific moment or\ntill now if the last had not been defined.\n\n\nSee more: [Scope Schema](https://schema.laboperator.com/schemas/definitions/step/element_objects/scope) "
                                    }
                                }
                            }
                        },
                        {
                            "if": null,
                            "properties": {
                                "type": {
                                    "const": "open_range"
                                }
                            },
                            "then": {
                                "properties": {
                                    "params": {
                                        "type": "object",
                                        "description": "An interval from defined point in time till another specific moment or\ntill now if the last had not been defined.\n",
                                        "required": [
                                            "start_at"
                                        ],
                                        "properties": {
                                            "start_at": {
                                                "oneOf": [
                                                    {
                                                        "$ref": "#/definitions/memberName"
                                                    },
                                                    {
                                                        "type": "string",
                                                        "pattern": "^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?$"
                                                    }
                                                ]
                                            }
                                        },
                                        "examples": [
                                            {
                                                "start_at": "StartTimeField"
                                            }
                                        ],
                                        "markdownDescription": "An interval from defined point in time till another specific moment or\ntill now if the last had not been defined.\n\n\nSee more: [Scope Schema](https://schema.laboperator.com/schemas/definitions/step/element_objects/scope) "
                                    }
                                }
                            }
                        }
                    ],
                    "markdownDescription": "Scope of time for displaying data points\n\n\nSee more: [Scope Schema](https://schema.laboperator.com/schemas/definitions/step/element_objects/scope) "
                }
            },
            "table_attributes": {
                "columns": {
                    "type": "array",
                    "title": "Table column mapping schema",
                    "description": "A static array that defines the structure of a table by mapping keys from the source data to columns.\n\nEach object in the source data represents an unordered collection of data. By default the order of columns in a table is therefore not fixed. In order to give a table a fixed column structure, it is required to map columns to specific keys.\n\nColumn mapping for table tabs takes precedence over the table-wide `columns` setting.\n",
                    "items": {
                        "type": "object",
                        "description": "The properties of each individual column.",
                        "required": [
                            "value",
                            "label"
                        ],
                        "properties": {
                            "value": {
                                "$ref": "#/definitions/jsonPointer",
                                "description": "The pointer to the value for each row in a column. The path is resolved relative to each row object.\n",
                                "markdownDescription": "The pointer to the value for each row in a column. The path is resolved relative to each row object.\n\n\nSee more: [Columns Schema](https://schema.laboperator.com/schemas/definitions/step/table_attributes/columns) "
                            },
                            "label": {
                                "type": "string",
                                "description": "The display name of the column.",
                                "markdownDescription": "The display name of the column.\n\nSee more: [Columns Schema](https://schema.laboperator.com/schemas/definitions/step/table_attributes/columns) "
                            },
                            "formatSpecifier": {
                                "$ref": "#/definitions/formatSpecifier",
                                "description": "A specifier describing number formatting for numeric field values. All other field value types will ignore this.\n",
                                "markdownDescription": "A specifier describing number formatting for numeric field values. All other field value types will ignore this.\n\n\nSee more: [Columns Schema](https://schema.laboperator.com/schemas/definitions/step/table_attributes/columns) "
                            },
                            "align": {
                                "type": "string",
                                "default": "left",
                                "description": "The horizontal alignment of the cell values within a column.\n",
                                "enum": [
                                    "left",
                                    "center",
                                    "right"
                                ],
                                "markdownDescription": "The horizontal alignment of the cell values within a column.\n\n\nSee more: [Columns Schema](https://schema.laboperator.com/schemas/definitions/step/table_attributes/columns) "
                            },
                            "editable": {
                                "type": "boolean",
                                "default": false,
                                "description": "A flag indicating if cells in this column are editable. If no `ui:widget` is specified, the column cells will display a text input.\n",
                                "markdownDescription": "A flag indicating if cells in this column are editable. If no `ui:widget` is specified, the column cells will display a text input.\n\n\nSee more: [Columns Schema](https://schema.laboperator.com/schemas/definitions/step/table_attributes/columns) "
                            },
                            "selectable": {
                                "type": "boolean",
                                "description": "A flag indicating if cells in this column are selectable. It takes precedence over the table-wide `selectable: ['cells']` setting. Row selection is not affected.\n",
                                "markdownDescription": "A flag indicating if cells in this column are selectable. It takes precedence over the table-wide `selectable: ['cells']` setting. Row selection is not affected.\n\n\nSee more: [Columns Schema](https://schema.laboperator.com/schemas/definitions/step/table_attributes/columns) "
                            },
                            "ui:widget": {
                                "type": "string",
                                "default": "textfield",
                                "enum": [
                                    "checkbox",
                                    "switch",
                                    "textfield"
                                ]
                            },
                            "ui:options": {
                                "type": "object",
                                "description": "Configuration options for the UI widgets.\n",
                                "properties": {
                                    "placeholder": {
                                        "type": "string",
                                        "description": "The short hint displayed in a text field before entering a value.\n",
                                        "markdownDescription": "The short hint displayed in a text field before entering a value.\n\n\nSee more: [Columns Schema](https://schema.laboperator.com/schemas/definitions/step/table_attributes/columns) "
                                    },
                                    "type": {
                                        "type": "string",
                                        "default": "text",
                                        "description": "The HTML5 input type of a text field.\n",
                                        "enum": [
                                            "text",
                                            "number"
                                        ],
                                        "markdownDescription": "The HTML5 input type of a text field.\n\n\nSee more: [Columns Schema](https://schema.laboperator.com/schemas/definitions/step/table_attributes/columns) "
                                    }
                                },
                                "markdownDescription": "Configuration options for the UI widgets.\n\n\nSee more: [Columns Schema](https://schema.laboperator.com/schemas/definitions/step/table_attributes/columns) "
                            }
                        },
                        "examples": [
                            {
                                "label": "Compound",
                                "value": "name"
                            },
                            {
                                "label": "Density (g/cm³)",
                                "value": "density",
                                "align": "right"
                            },
                            {
                                "label": "Molar mass (g/mol)",
                                "value": "molar_mass",
                                "align": "right"
                            }
                        ],
                        "markdownDescription": "The properties of each individual column.\n\nSee more: [Columns Schema](https://schema.laboperator.com/schemas/definitions/step/table_attributes/columns) "
                    },
                    "markdownDescription": "A static array that defines the structure of a table by mapping keys from the source data to columns.\n\nEach object in the source data represents an unordered collection of data. By default the order of columns in a table is therefore not fixed. In order to give a table a fixed column structure, it is required to map columns to specific keys.\n\nColumn mapping for table tabs takes precedence over the table-wide `columns` setting.\n\n\nSee more: [Columns Schema](https://schema.laboperator.com/schemas/definitions/step/table_attributes/columns) "
                },
                "rules": {
                    "type": "array",
                    "title": "Table rules",
                    "description": "Rules can be leveraged to dynamically change both the behavior and appearance of a table.\n\nWhen a rule condition is fulfilled, the `editable` and `selectable` behavior of cells, rows, columns, or tabs can be set. Likewise, the background color or text color can be changed to visualize a certain state or change of behavior to the user. For example:\n\n  - When a cell number value is negative, change the background color to red.\n  - When a cell number value is positive, change the background color to green, make it selectable, but no longer editable.\n  - When all cells in a column have no value, the column cells are not selectable or editable across all other tabs of the table.\n",
                    "items": {
                        "type": "object",
                        "description": "The individual rules that will be applied to the table. Rules will be applied in the order specified in the template. Later rules will overwrite previous rules.\n",
                        "required": [
                            "range",
                            "apply"
                        ],
                        "additionalProperties": false,
                        "properties": {
                            "range": {
                                "type": "object",
                                "description": "The range of columns, rows and tabs that the rules apply to. Use the [mathematical ellipsis notation](https://en.wikipedia.org/wiki/Ellipsis#In_mathematical_notation) to define a sequence of successive values from a start point to an end point inclusively. The range is zero-based, meaning its first entity is assigned the index 0.\nYou can specify one or multiple properties to define a selection of cells. Setting only the `rows` value, for example, would apply a given set of rules to all cells in the defined rows in all tabs. Including the `columns` and `tabs` settings would then narrow down that selection.\n",
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                    "columns": {
                                        "oneOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "type": "number"
                                            }
                                        ]
                                    },
                                    "rows": {
                                        "oneOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "type": "number"
                                            }
                                        ]
                                    },
                                    "tabs": {
                                        "oneOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "type": "integer"
                                            }
                                        ]
                                    }
                                },
                                "examples": [
                                    "range:\n  # sequence of 1, 2, 3, 4, 5\n  rows: 0,...,4\n  # only the fourth column\n  columns: 3\n"
                                ],
                                "markdownDescription": "The range of columns, rows and tabs that the rules apply to. Use the [mathematical ellipsis notation](https://en.wikipedia.org/wiki/Ellipsis#In_mathematical_notation) to define a sequence of successive values from a start point to an end point inclusively. The range is zero-based, meaning its first entity is assigned the index 0.\nYou can specify one or multiple properties to define a selection of cells. Setting only the `rows` value, for example, would apply a given set of rules to all cells in the defined rows in all tabs. Including the `columns` and `tabs` settings would then narrow down that selection.\n\n\nSee more: [Rules Schema](https://schema.laboperator.com/schemas/definitions/step/table_attributes/rules) "
                            },
                            "condition": {
                                "$ref": "#/definitions/script",
                                "description": "A script consisting of one or multiple conditions. The context of the script is defined by all fields and tables present in the workflow step, along with the `currentRow`, `currentCell`, and `currentTab` variables with their respective indexes.\n",
                                "markdownDescription": "A script consisting of one or multiple conditions. The context of the script is defined by all fields and tables present in the workflow step, along with the `currentRow`, `currentCell`, and `currentTab` variables with their respective indexes.\n\n\nSee more: [Rules Schema](https://schema.laboperator.com/schemas/definitions/step/table_attributes/rules) "
                            },
                            "apply": {
                                "type": "object",
                                "description": "The changes that are applied to cells, rows and tabs in the `range` if the `condition` is fulfilled.\n",
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                    "selectable": {
                                        "type": "boolean"
                                    },
                                    "editable": {
                                        "type": "boolean"
                                    },
                                    "backgroundColor": {
                                        "type": "string",
                                        "description": "The value must be a valid [CSS color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Theme colors can be applied using the `error`, `warning`, `success` and `info` keywords. When choosing colors, also consider the default highlight styles of tables for cell and row selection to ensure sufficient contrast.\n",
                                        "markdownDescription": "The value must be a valid [CSS color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Theme colors can be applied using the `error`, `warning`, `success` and `info` keywords. When choosing colors, also consider the default highlight styles of tables for cell and row selection to ensure sufficient contrast.\n\n\nSee more: [Rules Schema](https://schema.laboperator.com/schemas/definitions/step/table_attributes/rules) "
                                    },
                                    "textColor": {
                                        "type": "string",
                                        "description": "The value must be a valid [CSS color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Theme colors can be applied using the `error`, `warning`, `success` and `info` keywords. When choosing colors, also consider the default highlight styles of tables for cell and row selection to ensure sufficient contrast.\n",
                                        "markdownDescription": "The value must be a valid [CSS color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Theme colors can be applied using the `error`, `warning`, `success` and `info` keywords. When choosing colors, also consider the default highlight styles of tables for cell and row selection to ensure sufficient contrast.\n\n\nSee more: [Rules Schema](https://schema.laboperator.com/schemas/definitions/step/table_attributes/rules) "
                                    },
                                    "hintText": {
                                        "type": "string",
                                        "description": "The hint text that will be available for the user when the rules are applied.\n",
                                        "markdownDescription": "The hint text that will be available for the user when the rules are applied.\n\n\nSee more: [Rules Schema](https://schema.laboperator.com/schemas/definitions/step/table_attributes/rules) "
                                    }
                                },
                                "markdownDescription": "The changes that are applied to cells, rows and tabs in the `range` if the `condition` is fulfilled.\n\n\nSee more: [Rules Schema](https://schema.laboperator.com/schemas/definitions/step/table_attributes/rules) "
                            }
                        },
                        "markdownDescription": "The individual rules that will be applied to the table. Rules will be applied in the order specified in the template. Later rules will overwrite previous rules.\n\n\nSee more: [Rules Schema](https://schema.laboperator.com/schemas/definitions/step/table_attributes/rules) "
                    },
                    "examples": [
                        "range:\n  # Columns 1 to the last\n  columns: 0,...\n  # Rows from 4 to 10\n  rows: 3,...,9\n  # Only first tab\n  tabs: 0\ncondition: |\n  myReferenceField.experiments.firstExperiment.density < CELL_VALUE(table, tab, row, column - 1) &&  CELL_VALUE(table, tab, row, column - 1) <= myReferenceField.experiments.secondExperiment.density\napply:\n  editable: false\n  backgroundColor: rgb(0, 128, 0)\n  textColor: rgb(255, 255, 255)\n  hintText: I am a hint text\n",
                        "range:\n  # Columns 1 and 4 to 6\n  columns: 0,3,...,5\n  # Rows 2 and 4 to 10\n  rows: 1,3,...,9\n  # Tabs 1 and 5 to 7\n  tabs: '0,4,...,6'\napply:\n  selectable: true\n  editable: true\n  backgroundColor: '#FF0000'\n  textColor: '#FFFFFF'\n",
                        {
                            "range": {
                                "tabs": 2
                            },
                            "condition": "CELL_VALUE(table, tab, row, column - 1) > myReferenceField.density",
                            "apply": {
                                "selectable": true,
                                "editable": true,
                                "backgroundColor": "green",
                                "textColor": "white"
                            }
                        }
                    ],
                    "markdownDescription": "Rules can be leveraged to dynamically change both the behavior and appearance of a table.\n\nWhen a rule condition is fulfilled, the `editable` and `selectable` behavior of cells, rows, columns, or tabs can be set. Likewise, the background color or text color can be changed to visualize a certain state or change of behavior to the user. For example:\n\n  - When a cell number value is negative, change the background color to red.\n  - When a cell number value is positive, change the background color to green, make it selectable, but no longer editable.\n  - When all cells in a column have no value, the column cells are not selectable or editable across all other tabs of the table.\n\n\nSee more: [Rules Schema](https://schema.laboperator.com/schemas/definitions/step/table_attributes/rules) "
                }
            }
        },
        "workflow_event": {
            "addStep": {
                "type": "object",
                "title": "AddStep Event",
                "description": "The event of adding a step to a running dynamic template.\nThe added step will be appended as the last step of the run.\n",
                "properties": {
                    "type": {
                        "enum": [
                            "add_step"
                        ]
                    },
                    "payload": {
                        "oneOf": [
                            {
                                "type": "object",
                                "description": "Payload for externally defined step template",
                                "required": [
                                    "uuid",
                                    "version"
                                ],
                                "properties": {
                                    "uuid": {
                                        "$ref": "#/definitions/uuid"
                                    },
                                    "version": {
                                        "$ref": "#/definitions/version"
                                    }
                                },
                                "markdownDescription": "Payload for externally defined step template\n\nSee more: [Add Step Schema](https://schema.laboperator.com/schemas/definitions/workflow_event/add_step) "
                            },
                            {
                                "type": "object",
                                "description": "Payload of locally defined step template",
                                "required": [
                                    "step"
                                ],
                                "properties": {
                                    "step": {
                                        "$ref": "#/definitions/memberName"
                                    }
                                },
                                "markdownDescription": "Payload of locally defined step template\n\nSee more: [Add Step Schema](https://schema.laboperator.com/schemas/definitions/workflow_event/add_step) "
                            }
                        ]
                    }
                },
                "markdownDescription": "The event of adding a step to a running dynamic template.\nThe added step will be appended as the last step of the run.\n\n\nSee more: [Add Step Schema](https://schema.laboperator.com/schemas/definitions/workflow_event/add_step) "
            },
            "moveStep": {
                "type": "object",
                "title": "MoveStep Event",
                "description": "The event of moving a step in a running dynamic template.\nOnly steps which are not yet started can be moved.\n",
                "properties": {
                    "type": {
                        "enum": [
                            "move_step"
                        ]
                    },
                    "payload": {
                        "type": "object",
                        "require": [
                            "from",
                            "to"
                        ],
                        "properties": {
                            "from": {
                                "type": "string",
                                "pattern": "^/flow/"
                            },
                            "to": {
                                "type": "string",
                                "pattern": "^/flow/"
                            }
                        }
                    }
                },
                "markdownDescription": "The event of moving a step in a running dynamic template.\nOnly steps which are not yet started can be moved.\n\n\nSee more: [Move Step Schema](https://schema.laboperator.com/schemas/definitions/workflow_event/move_step) "
            },
            "removeStep": {
                "type": "object",
                "title": "RemoveStep Event",
                "description": "The event of removing a step from a running dynamic template.\nOnly steps which are not yet started can be removed\n",
                "properties": {
                    "type": {
                        "enum": [
                            "remove_step"
                        ]
                    },
                    "payload": {
                        "type": "object",
                        "required": [
                            "pointer"
                        ],
                        "properties": {
                            "pointer": {
                                "type": "string",
                                "pattern": "^/flow/"
                            }
                        }
                    }
                },
                "markdownDescription": "The event of removing a step from a running dynamic template.\nOnly steps which are not yet started can be removed\n\n\nSee more: [Remove Step Schema](https://schema.laboperator.com/schemas/definitions/workflow_event/remove_step) "
            },
            "resolveForEach": {
                "type": "object",
                "title": "ResolveForEach Event",
                "description": "The event of resolving a single iteration of `for-each` flow of steps.\n\nThe iteration will continue up to and including the last item in the source array.\n",
                "properties": {
                    "type": {
                        "enum": [
                            "resolve_for_each"
                        ]
                    },
                    "payload": {
                        "type": "object",
                        "required": [
                            "pointer",
                            "iterator"
                        ],
                        "properties": {
                            "pointer": {
                                "type": "string",
                                "pattern": "^/flow/"
                            },
                            "iterator": {
                                "type": "integer"
                            }
                        }
                    }
                },
                "markdownDescription": "The event of resolving a single iteration of `for-each` flow of steps.\n\nThe iteration will continue up to and including the last item in the source array.\n\n\nSee more: [Resolve For Each Schema](https://schema.laboperator.com/schemas/definitions/workflow_event/resolve_for_each) "
            },
            "resolveIf": {
                "type": "object",
                "title": "ResolveIf Event",
                "description": "The event of resolving the condition in an `if` flow of steps.\n\nIf the condition resolves to a truthy value, the steps included in `then` will be unfolded.\nOtherwise, the steps included in `else` will be unfolded.\n\nIf `else` is not specified in the `if` flow and the condition resolves to a falsy value,\nno steps will be unfolded.\n",
                "properties": {
                    "type": {
                        "enum": [
                            "resolve_if"
                        ]
                    },
                    "payload": {
                        "type": "object",
                        "required": [
                            "pointer",
                            "resolved"
                        ],
                        "properties": {
                            "pointer": {
                                "type": "string",
                                "pattern": "^/flow/"
                            },
                            "resolved": {
                                "type": "boolean"
                            }
                        }
                    }
                },
                "markdownDescription": "The event of resolving the condition in an `if` flow of steps.\n\nIf the condition resolves to a truthy value, the steps included in `then` will be unfolded.\nOtherwise, the steps included in `else` will be unfolded.\n\nIf `else` is not specified in the `if` flow and the condition resolves to a falsy value,\nno steps will be unfolded.\n\n\nSee more: [Resolve If Schema](https://schema.laboperator.com/schemas/definitions/workflow_event/resolve_if) "
            },
            "resolveUntil": {
                "type": "object",
                "title": "ResolveUntil Event",
                "description": "The event of resolving the condition in a `loop-until` flow of steps.\n\nIf the condition in `until` resolves to a falsy value, the steps included in `loop` will be unfolded.\nOtherwise, the execution will break out of the `loop-until` flow and continue to evaluate the next entry in the parent flow.\n",
                "properties": {
                    "type": {
                        "enum": [
                            "resolve_until"
                        ]
                    },
                    "payload": {
                        "type": "object",
                        "required": [
                            "pointer",
                            "resolved"
                        ],
                        "properties": {
                            "pointer": {
                                "type": "string",
                                "pattern": "^/flow/"
                            },
                            "resolved": {
                                "type": "boolean"
                            }
                        }
                    }
                },
                "markdownDescription": "The event of resolving the condition in a `loop-until` flow of steps.\n\nIf the condition in `until` resolves to a falsy value, the steps included in `loop` will be unfolded.\nOtherwise, the execution will break out of the `loop-until` flow and continue to evaluate the next entry in the parent flow.\n\n\nSee more: [Resolve Until Schema](https://schema.laboperator.com/schemas/definitions/workflow_event/resolve_until) "
            },
            "resolveWhile": {
                "type": "object",
                "title": "ResolveWhile Event",
                "description": "The event of resolving the condition in a `while` flow of steps.\n\nIf the condition in `while` resolves to a truthy value, the steps included in `do` will be unfolded.\nOtherwise, the execution will break out of the `while` flow and continue to evaluate the next entry in the parent flow.\n",
                "properties": {
                    "type": {
                        "enum": [
                            "resolve_while"
                        ]
                    },
                    "payload": {
                        "type": "object",
                        "required": [
                            "pointer",
                            "resolved"
                        ],
                        "properties": {
                            "pointer": {
                                "type": "string",
                                "pattern": "^/flow/"
                            },
                            "resolved": {
                                "type": "boolean"
                            }
                        }
                    }
                },
                "markdownDescription": "The event of resolving the condition in a `while` flow of steps.\n\nIf the condition in `while` resolves to a truthy value, the steps included in `do` will be unfolded.\nOtherwise, the execution will break out of the `while` flow and continue to evaluate the next entry in the parent flow.\n\n\nSee more: [Resolve While Schema](https://schema.laboperator.com/schemas/definitions/workflow_event/resolve_while) "
            }
        },
        "workflow_template": {
            "actionIdentifier": {
                "type": "string",
                "title": "Action Identifier Schema",
                "enum": [
                    "COMPLETE_STEP",
                    "complete_step",
                    "REPEAT_STEP",
                    "repeat_step",
                    "GO_TO_PREVIOUS_STEP",
                    "go_to_previous_step",
                    "GoToPreviousStep",
                    "START_SUBSTEP",
                    "start_substep",
                    "COMPLETE_SUBSTEP",
                    "complete_substep",
                    "REPEAT_SUBSTEP",
                    "repeat_substep",
                    "START_TIMER",
                    "start_timer",
                    "STOP_TIMER",
                    "stop_timer",
                    "RESET_TIMER",
                    "reset_timer",
                    "COMPLETE_TIMER",
                    "complete_timer",
                    "CONFIRM_ALERT",
                    "confirm_alert"
                ]
            },
            "actionObject": {
                "type": "object",
                "title": "Action Object Schema",
                "description": "Used to pass arguments to an action.",
                "oneOf": [
                    {
                        "$ref": "#/definitions/workflow_template/action_objects/addStep"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/action_objects/alert"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/action_objects/completeTimer"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/action_objects/getResources"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/action_objects/goToPreviousStep"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/action_objects/goToStep"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/action_objects/notify"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/action_objects/repeatSubstep"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/action_objects/resetTimer"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/action_objects/sendCommand"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/action_objects/selectRow"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/action_objects/selectCell"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/action_objects/setField"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/action_objects/setTemporaryField"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/action_objects/startTimer"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/action_objects/stopTimer"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/action_objects/updateResource"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/action_objects/webhook"
                    }
                ],
                "markdownDescription": "Used to pass arguments to an action.\n\nSee more: [Action Object Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/actionObject) "
            },
            "actions": {
                "title": "Actions Schema",
                "description": "Actions can come as a simple identifier string or an object to pass options.\nEither variant can be used as single action or a list of actions. A list of\nactions will always be executed sequentially. A somehow erroneous action\nwill cause the consecutive actions not to be executed.\n",
                "oneOf": [
                    {
                        "$ref": "#/definitions/workflow_template/actionIdentifier"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/actionObject"
                    },
                    {
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/definitions/workflow_template/actionIdentifier"
                                },
                                {
                                    "$ref": "#/definitions/workflow_template/actionObject"
                                }
                            ]
                        }
                    }
                ],
                "markdownDescription": "Actions can come as a simple identifier string or an object to pass options.\nEither variant can be used as single action or a list of actions. A list of\nactions will always be executed sequentially. A somehow erroneous action\nwill cause the consecutive actions not to be executed.\n\n\nSee more: [Actions Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/actions) "
            },
            "behavior": {
                "type": "object",
                "title": "Behavior Schema",
                "description": "The general scheme of a behavior always consists of a `trigger` and an\n`action`. It is extended by the use of conditions, delays, alternative\nactions, multiple triggers and multiple actions.\n",
                "additionalProperties": false,
                "required": [
                    "when",
                    "do"
                ],
                "properties": {
                    "title": {
                        "type": "string",
                        "maxLength": 200,
                        "description": "A title mostly for better readability of the step schema.\n",
                        "markdownDescription": "A title mostly for better readability of the step schema.\n\n\nSee more: [Behavior Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/behavior) "
                    },
                    "when": {
                        "$ref": "#/definitions/workflow_template/triggers"
                    },
                    "delay": {
                        "description": "Wait a given duration before evaluating conditions and executing actions.\n",
                        "$ref": "#/definitions/duration",
                        "markdownDescription": "Wait a given duration before evaluating conditions and executing actions.\n\n\nSee more: [Behavior Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/behavior) "
                    },
                    "and": {
                        "description": "A condition that can access fields, and trigger information.\n",
                        "$ref": "#/definitions/script",
                        "markdownDescription": "A condition that can access fields, and trigger information.\n\n\nSee more: [Behavior Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/behavior) "
                    },
                    "do": {
                        "$ref": "#/definitions/workflow_template/actions"
                    },
                    "else": {
                        "$ref": "#/definitions/workflow_template/actions"
                    }
                },
                "markdownDescription": "The general scheme of a behavior always consists of a `trigger` and an\n`action`. It is extended by the use of conditions, delays, alternative\nactions, multiple triggers and multiple actions.\n\n\nSee more: [Behavior Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/behavior) "
            },
            "behaviors": {
                "type": "array",
                "title": "Behaviors Schema",
                "description": "Behaviors provide means to define the behavior of a step. They can be used\nto control devices, record results, wait for device responses, control flow\nwithin a step and much more. The general scheme of a behavior is\n`trigger` => `action`.\n\nBehaviors are always treated as parallel independant definitions.\n",
                "items": {
                    "$ref": "#/definitions/workflow_template/behavior"
                },
                "markdownDescription": "Behaviors provide means to define the behavior of a step. They can be used\nto control devices, record results, wait for device responses, control flow\nwithin a step and much more. The general scheme of a behavior is\n`trigger` => `action`.\n\nBehaviors are always treated as parallel independant definitions.\n\n\nSee more: [Behaviors Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/behaviors) "
            },
            "changeReason": {
                "title": "Change Reason",
                "description": "A flag indicating whether subsequent field updates require a reason and prompt the user with a reason dialog. The first update to a field's value never requires a reason, any further updates always do. Consider the following example:\n\n    1. field has no value\n    2. update to `10`\n    3. update to `22` => reason required\n    4. update to `null` => reason required\n    5. update to `14` => reason required\n    6. user does not submit reason => field value is still `null`\n\nA reason can be submitted programmatically as part of a `set_field` action, which would then not prompt the reason dialog to the user during workflow execution. See [Set Field schema](/schemas/definitions/workflow_template/action_objects/setField/) for more information.\n\nFor fields of type array or object the `changeReason` setting can be applied both at the top-level, meaning any partial update of an existing value requires a reason, or for individual items and properties only. Nested settings take precedence over higher-level settings.\n\nA field update that requires a reason will always fail if no reason is provided.\n",
                "oneOf": [
                    {
                        "type": "boolean",
                        "description": "A field flagged with the boolean `changeReason: true` setting uses the default `message` and `validation` settings for its reason dialog.\n",
                        "markdownDescription": "A field flagged with the boolean `changeReason: true` setting uses the default `message` and `validation` settings for its reason dialog.\n\n\nSee more: [Change Reason Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/changeReason) "
                    },
                    {
                        "type": "object",
                        "minProperties": 1,
                        "additionalProperties": false,
                        "properties": {
                            "message": {
                                "type": "string",
                                "maxLength": 1000,
                                "default": "This field is flagged as a change reason field. To update the field with a new value, a reason must be submitted.\n",
                                "description": "A message that appears in the reason dialog to provide additional information to the user and to make sure a valid reason is entered.\n\nThe default message is translated according to the user profile's language setting.\n",
                                "markdownDescription": "A message that appears in the reason dialog to provide additional information to the user and to make sure a valid reason is entered.\n\nThe default message is translated according to the user profile's language setting.\n\n\nSee more: [Change Reason Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/changeReason) "
                            },
                            "validation": {
                                "type": "string",
                                "format": "regex",
                                "default": "^(?!^(\\S)(?:\\s*\\1)+$)(?:[ \\t]*\\S[ \\t]*){5,}$",
                                "description": "A regular expression pattern to validate user input in the reason dialog. A reason can only be submitted and the field updated, if the pattern matches. Reasons provided in the template via the `options` setting are always valid and do not have to match a pattern.\n\nThe default pattern matches five or more non-identical characters, excluding whitespace characters (spaces, tabs, line breaks).\n",
                                "markdownDescription": "A regular expression pattern to validate user input in the reason dialog. A reason can only be submitted and the field updated, if the pattern matches. Reasons provided in the template via the `options` setting are always valid and do not have to match a pattern.\n\nThe default pattern matches five or more non-identical characters, excluding whitespace characters (spaces, tabs, line breaks).\n\n\nSee more: [Change Reason Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/changeReason) "
                            },
                            "options": {
                                "type": "array",
                                "description": "A list of reasons for the user to choose from in the reason dialog. When selected, any of the specified options is considered a valid reason and no additional user input is required.\n\nThis setting automatically adds one additional option of \"Other\" that, when selected, allows the user to enter a custom reason. A custom reason always needs to match the validation pattern.\n",
                                "items": {
                                    "type": "string",
                                    "examples": [
                                        "Device did not function properly",
                                        "Balance did not reach stable weight",
                                        "Measurement failed"
                                    ]
                                },
                                "markdownDescription": "A list of reasons for the user to choose from in the reason dialog. When selected, any of the specified options is considered a valid reason and no additional user input is required.\n\nThis setting automatically adds one additional option of \"Other\" that, when selected, allows the user to enter a custom reason. A custom reason always needs to match the validation pattern.\n\n\nSee more: [Change Reason Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/changeReason) "
                            }
                        }
                    }
                ],
                "examples": [
                    {
                        "message": "Field update requires a reason. Please select one of the options or submit your own.\n",
                        "validation": "^\\w.+\\s.+",
                        "options": [
                            "Solution factor too high",
                            "Solution factor too low"
                        ]
                    }
                ],
                "markdownDescription": "A flag indicating whether subsequent field updates require a reason and prompt the user with a reason dialog. The first update to a field's value never requires a reason, any further updates always do. Consider the following example:\n\n    1. field has no value\n    2. update to `10`\n    3. update to `22` => reason required\n    4. update to `null` => reason required\n    5. update to `14` => reason required\n    6. user does not submit reason => field value is still `null`\n\nA reason can be submitted programmatically as part of a `set_field` action, which would then not prompt the reason dialog to the user during workflow execution. See [Set Field schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/setField/) for more information.\n\nFor fields of type array or object the `changeReason` setting can be applied both at the top-level, meaning any partial update of an existing value requires a reason, or for individual items and properties only. Nested settings take precedence over higher-level settings.\n\nA field update that requires a reason will always fail if no reason is provided.\n\n\nSee more: [Change Reason Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/changeReason) "
            },
            "flow": {
                "title": "Flow",
                "description": "A set of sequential steps that define the flow of the workflow. Each step can be configured with additional flow control mechanisms to support conditional execution and repetition.\n",
                "$ref": "#/definitions/flow/sequential",
                "markdownDescription": "A set of sequential steps that define the flow of the workflow. Each step can be configured with additional flow control mechanisms to support conditional execution and repetition.\n\n\nSee more: [Flow Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/flow) "
            },
            "step": {
                "type": "object",
                "title": "Step",
                "description": "A step is a closed set of activities and instructions.\n",
                "required": [
                    "info"
                ],
                "allOf": [
                    {
                        "$ref": "#/definitions/stepAttributes"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "info": {
                                "type": "object",
                                "required": [
                                    "title"
                                ],
                                "additionalProperties": false,
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "maxLength": 100,
                                        "description": "The display name of the step in Laboperator.\n",
                                        "examples": [
                                            "Tare Balance"
                                        ],
                                        "markdownDescription": "The display name of the step in Laboperator.\n\n\nSee more: [Step Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/step) "
                                    },
                                    "description": {
                                        "type": "string",
                                        "maxLength": 1000,
                                        "description": "A descriptive summary of the step.\n",
                                        "markdownDescription": "A descriptive summary of the step.\n\n\nSee more: [Step Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/step) "
                                    }
                                }
                            }
                        }
                    }
                ],
                "markdownDescription": "A step is a closed set of activities and instructions.\n\n\nSee more: [Step Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/step) "
            },
            "steps": {
                "type": "object",
                "title": "Steps Section Schema",
                "description": "The `steps` section defines all steps used in a workflow. A step is a set\nof closed activities and instructions. Steps can be defined outside of a\nworkflow and then be reused across different workflows.\n\nThe `steps` sections maps inline or external definitions to a key that\nis unique within this workflow. That key or identifier must be unique among\nthe keys in the steps object. If a key is defined twice the later definition\noverrides the previous.\n\nSteps defined outside of this workflow template can use the fields defined\nfor this workflow by mapping them to the internally defined fields in the\nworkflow section of the workflow template.\n",
                "propertyNames": {
                    "$ref": "#/definitions/memberName"
                },
                "additionalProperties": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/workflow_template/step"
                        },
                        {
                            "$ref": "#/definitions/stepReference"
                        }
                    ]
                },
                "markdownDescription": "The `steps` section defines all steps used in a workflow. A step is a set\nof closed activities and instructions. Steps can be defined outside of a\nworkflow and then be reused across different workflows.\n\nThe `steps` sections maps inline or external definitions to a key that\nis unique within this workflow. That key or identifier must be unique among\nthe keys in the steps object. If a key is defined twice the later definition\noverrides the previous.\n\nSteps defined outside of this workflow template can use the fields defined\nfor this workflow by mapping them to the internally defined fields in the\nworkflow section of the workflow template.\n\n\nSee more: [Steps Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/steps) "
            },
            "triggerIdentifier": {
                "type": "string",
                "title": "Trigger Identifier Schema",
                "enum": [
                    "ON_RUN_PAUSE",
                    "on_run_pause",
                    "RUN_PAUSE",
                    "run_pause",
                    "ON_RUN_RESUME",
                    "on_run_resume",
                    "RUN_RESUME",
                    "run_resume",
                    "ON_RUN_COMPLETE",
                    "on_run_complete",
                    "RUN_COMPLETE",
                    "run_complete",
                    "ON_RUN_START",
                    "on_run_start",
                    "RUN_START",
                    "run_start",
                    "ON_RUN_LOCK",
                    "on_run_lock",
                    "RUN_LOCK",
                    "run_lock",
                    "ON_STEP_START",
                    "on_step_start",
                    "STEP_START",
                    "step_start",
                    "ON_STEP_COMPLETE",
                    "on_step_complete",
                    "STEP_COMPLETE",
                    "step_complete",
                    "ON_DEVICE_STATUS_UPDATE",
                    "on_device_status_update",
                    "DEVICE_STATUS_UPDATE",
                    "device_status_update",
                    "ON_SUBSTEP_START",
                    "on_substep_start",
                    "SUBSTEP_START",
                    "substep_start",
                    "ON_SUBSTEP_COMPLETE",
                    "on_substep_complete",
                    "SUBSTEP_COMPLETE",
                    "substep_complete",
                    "ON_TIMER_START",
                    "on_timer_start",
                    "TIMER_START",
                    "timer_start",
                    "ON_TIMER_STOP",
                    "on_timer_stop",
                    "TIMER_STOP",
                    "timer_stop",
                    "ON_TIMER_RESET",
                    "on_timer_reset",
                    "TIMER_RESET",
                    "timer_reset",
                    "ON_TIMER_COMPLETE",
                    "on_timer_complete",
                    "TIMER_COMPLETE",
                    "timer_complete",
                    "ON_SELECTOR_CONFIRM",
                    "on_selector_confirm",
                    "SELECTOR_CONFIRM",
                    "selector_confirm",
                    "ON_SCAN",
                    "on_scan",
                    "SCAN",
                    "scan"
                ]
            },
            "triggerObject": {
                "type": "object",
                "title": "Trigger Object Schema",
                "description": "Used to pass arguments to a trigger.",
                "oneOf": [
                    {
                        "$ref": "#/definitions/workflow_template/trigger_objects/commandResponse"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/trigger_objects/dataPoint"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/trigger_objects/fieldUpdate"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/trigger_objects/manual"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/trigger_objects/scan"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/trigger_objects/timerComplete"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/trigger_objects/timerReset"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/trigger_objects/timerStart"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/trigger_objects/timerStop"
                    }
                ],
                "markdownDescription": "Used to pass arguments to a trigger.\n\nSee more: [Trigger Object Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/triggerObject) "
            },
            "triggers": {
                "title": "Triggers Schema",
                "description": "Triggers can come as a simple identifier string or an object to pass options.\nEither variant can be used as a single trigger or a list of triggers.\nDifferent then actions, triggers are considered alternatives. Either of any\ntriggers could set the behavior in motion. While a behavior is in motion\nother occurrences of triggers on that behavior will have no effect, so the\nsame behavior can not be triggered multiple times in parallel.\n",
                "oneOf": [
                    {
                        "$ref": "#/definitions/workflow_template/triggerIdentifier"
                    },
                    {
                        "$ref": "#/definitions/workflow_template/triggerObject"
                    },
                    {
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/definitions/workflow_template/triggerIdentifier"
                                },
                                {
                                    "$ref": "#/definitions/workflow_template/triggerObject"
                                }
                            ]
                        }
                    }
                ],
                "markdownDescription": "Triggers can come as a simple identifier string or an object to pass options.\nEither variant can be used as a single trigger or a list of triggers.\nDifferent then actions, triggers are considered alternatives. Either of any\ntriggers could set the behavior in motion. While a behavior is in motion\nother occurrences of triggers on that behavior will have no effect, so the\nsame behavior can not be triggered multiple times in parallel.\n\n\nSee more: [Triggers Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/triggers) "
            },
            "action_objects": {
                "addStep": {
                    "type": "object",
                    "title": "AddStep Options",
                    "description": "Options to a AddStep action.\n",
                    "propertyNames": {
                        "enum": [
                            "AddStep",
                            "add_step",
                            "ADD_STEP"
                        ]
                    },
                    "additionalProperties": {
                        "oneOf": [
                            {
                                "type": "object",
                                "required": [
                                    "uuid",
                                    "version"
                                ],
                                "additionalProperties": false,
                                "properties": {
                                    "uuid": {
                                        "$ref": "#/definitions/uuid",
                                        "description": "A reference to a step template.",
                                        "markdownDescription": "A reference to a step template.\n\nSee more: [Add Step Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/addStep) "
                                    },
                                    "version": {
                                        "$ref": "#/definitions/version",
                                        "description": "Version on a step template.",
                                        "markdownDescription": "Version on a step template.\n\nSee more: [Add Step Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/addStep) "
                                    },
                                    "fields": {
                                        "$ref": "#/definitions/fieldValues"
                                    },
                                    "fieldMapping": {
                                        "$ref": "#/definitions/fieldMapping"
                                    }
                                }
                            },
                            {
                                "type": "object",
                                "required": [
                                    "step"
                                ],
                                "additionalProperties": false,
                                "properties": {
                                    "step": {
                                        "$ref": "#/definitions/memberName"
                                    },
                                    "fields": {
                                        "$ref": "#/definitions/fieldValues"
                                    },
                                    "fieldMapping": {
                                        "$ref": "#/definitions/fieldMapping"
                                    }
                                }
                            }
                        ]
                    },
                    "markdownDescription": "Options to a AddStep action.\n\n\nSee more: [Add Step Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/addStep) "
                },
                "alert": {
                    "type": "object",
                    "title": "Alert Object",
                    "description": "Options to an Alert action.\n",
                    "propertyNames": {
                        "enum": [
                            "alert",
                            "Alert",
                            "ALERT"
                        ]
                    },
                    "additionalProperties": {
                        "type": "object",
                        "required": [
                            "title",
                            "text"
                        ],
                        "properties": {
                            "title": {
                                "type": "string",
                                "description": "A title to display on the alert.\n",
                                "markdownDescription": "A title to display on the alert.\n\n\nSee more: [Alert Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/alert) "
                            },
                            "text": {
                                "type": "string",
                                "description": "A text to display on the alert. Supports markdown formatting.\n",
                                "markdownDescription": "A text to display on the alert. Supports markdown formatting.\n\n\nSee more: [Alert Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/alert) "
                            },
                            "buttons": {
                                "type": "array",
                                "description": "A set maximum of three buttons to display on the alert. Any\nbutton, will cause the alert modal to close. Remember to handle\nthe button key in a behavior.\n",
                                "default": [
                                    {
                                        "label": "OK",
                                        "key": "alert_confirmed"
                                    }
                                ],
                                "maxItems": 3,
                                "items": {
                                    "$ref": "#/definitions/button"
                                },
                                "markdownDescription": "A set maximum of three buttons to display on the alert. Any\nbutton, will cause the alert modal to close. Remember to handle\nthe button key in a behavior.\n\n\nSee more: [Alert Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/alert) "
                            }
                        }
                    },
                    "markdownDescription": "Options to an Alert action.\n\n\nSee more: [Alert Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/alert) "
                },
                "completeTimer": {
                    "type": "object",
                    "title": "CompleteTimer Options",
                    "description": "Options to an CompleteTimer action.\n",
                    "propertyNames": {
                        "enum": [
                            "complete_timer",
                            "COMPLETE_TIMER",
                            "CompleteTimer"
                        ]
                    },
                    "additionalProperties": {
                        "type": "object",
                        "properties": {
                            "identifier": {
                                "type": "string",
                                "description": "Identifier of a timer.\n",
                                "markdownDescription": "Identifier of a timer.\n\n\nSee more: [Complete Timer Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/completeTimer) "
                            }
                        }
                    },
                    "markdownDescription": "Options to an CompleteTimer action.\n\n\nSee more: [Complete Timer Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/completeTimer) "
                },
                "getResources": {
                    "type": "object",
                    "title": "Get Resources",
                    "description": "An action to filter related API resources.\n",
                    "propertyNames": {
                        "enum": [
                            "get_resources",
                            "GetResources",
                            "GET_RESOURCES"
                        ]
                    },
                    "additionalProperties": {
                        "type": "object",
                        "required": [
                            "tag"
                        ],
                        "properties": {
                            "tag": {
                                "$ref": "#/definitions/resourceTag"
                            },
                            "filter": {
                                "type": "object",
                                "propertyNames": {
                                    "$ref": "#/definitions/resourceTag"
                                }
                            },
                            "page": {
                                "type": "object",
                                "propertyNames": {
                                    "$ref": "#/definitions/resourceTag"
                                }
                            },
                            "sort": {
                                "type": "object",
                                "propertyNames": {
                                    "$ref": "#/definitions/resourceTag"
                                }
                            },
                            "blocking": {
                                "type": "boolean",
                                "description": "Determines if the query action will block subsequent steps.\n",
                                "default": false,
                                "markdownDescription": "Determines if the query action will block subsequent steps.\n\n\nSee more: [Get Resources Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/getResources) "
                            },
                            "onSuccess": {
                                "description": "The handler for filtered querying response",
                                "type": "object",
                                "required": [
                                    "do"
                                ],
                                "properties": {
                                    "do": {
                                        "$ref": "#/definitions/workflow_template/actions"
                                    }
                                },
                                "markdownDescription": "The handler for filtered querying response\n\nSee more: [Get Resources Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/getResources) "
                            }
                        }
                    },
                    "examples": [
                        {
                            "getResources": {
                                "tag": "workflow_runs",
                                "filter": {
                                    "workflow_runs": {
                                        "workflow_template_id": "workflow_run.data.attributes.workflow_template_id"
                                    }
                                },
                                "page": {
                                    "workflow_runs": {
                                        "size": 20
                                    }
                                },
                                "sort": {
                                    "workflow_runs": "-created_at"
                                },
                                "onSuccess": {
                                    "do": [
                                        {
                                            "set_field": {
                                                "field": "sampleField",
                                                "value": "response.data"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    ],
                    "markdownDescription": "An action to filter related API resources.\n\n\nSee more: [Get Resources Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/getResources) "
                },
                "goToPreviousStep": {
                    "type": "object",
                    "title": "GoToPreviousStep Options",
                    "description": "Options to an GoToPreviousStep action.\n",
                    "propertyNames": {
                        "enum": [
                            "go_to_previous_step",
                            "GO_TO_PREVIOUS_STEP",
                            "GoToPreviousStep"
                        ]
                    },
                    "additionalProperties": {
                        "type": "object",
                        "properties": {
                            "resetCurrent": {
                                "type": "boolean",
                                "default": false,
                                "description": "A boolean flag indicating that the current step should be reset as if\nit had not started yet.\n",
                                "markdownDescription": "A boolean flag indicating that the current step should be reset as if\nit had not started yet.\n\n\nSee more: [Go To Previous Step Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/goToPreviousStep) "
                            },
                            "resetPrevious": {
                                "type": "boolean",
                                "default": false,
                                "description": "A boolean flag indicating that the previous step should be reset\nbefore returning to it.\n",
                                "markdownDescription": "A boolean flag indicating that the previous step should be reset\nbefore returning to it.\n\n\nSee more: [Go To Previous Step Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/goToPreviousStep) "
                            },
                            "delay": {
                                "$ref": "#/definitions/duration"
                            }
                        }
                    },
                    "markdownDescription": "Options to an GoToPreviousStep action.\n\n\nSee more: [Go To Previous Step Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/goToPreviousStep) "
                },
                "goToStep": {
                    "type": "object",
                    "title": "GoToPreviousStep Options",
                    "description": "Options to an GoToStep action.\n",
                    "propertyNames": {
                        "enum": [
                            "go_to_step",
                            "GO_TO_STEP",
                            "GoToStep"
                        ]
                    },
                    "additionalProperties": {
                        "type": "object",
                        "required": [
                            "step"
                        ],
                        "properties": {
                            "step": {
                                "type": "integer",
                                "minimum": 1,
                                "description": "The step number of the step to navigate to. This action only makes\nsense for use with linear flows, with a static step number\ndistribution.\n",
                                "markdownDescription": "The step number of the step to navigate to. This action only makes\nsense for use with linear flows, with a static step number\ndistribution.\n\n\nSee more: [Go To Step Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/goToStep) "
                            },
                            "reset": {
                                "type": "boolean",
                                "default": false,
                                "description": "A boolean flag indicating that all intermediate steps should be reset.\n",
                                "markdownDescription": "A boolean flag indicating that all intermediate steps should be reset.\n\n\nSee more: [Go To Step Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/goToStep) "
                            },
                            "delay": {
                                "$ref": "#/definitions/duration"
                            }
                        }
                    },
                    "markdownDescription": "Options to an GoToStep action.\n\n\nSee more: [Go To Step Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/goToStep) "
                },
                "notify": {
                    "type": "object",
                    "title": "Notify Object",
                    "description": "Options to an Notify action. In contrast to an alert the notification does\nnot interrupt the execution of a workflow and requires no user interaction.\nIt will only be shown to users that have the workflow open at the time of\nthe action being run.\n",
                    "propertyNames": {
                        "enum": [
                            "Notify",
                            "notify",
                            "NOTIFY"
                        ]
                    },
                    "additionalProperties": {
                        "type": "object",
                        "required": [
                            "text"
                        ],
                        "properties": {
                            "text": {
                                "type": "string",
                                "description": "A text to display on the notification. Supports field value\ninterpolation using the double curly parentheses syntax `{{MyField}}`.\n",
                                "markdownDescription": "A text to display on the notification. Supports field value\ninterpolation using the double curly parentheses syntax `{{MyField}}`.\n\n\nSee more: [Notify Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/notify) "
                            },
                            "autoHideDuration": {
                                "type": "number",
                                "default": 5000,
                                "description": "Duration in milliseconds after which to hide the notification\nautomatically.\n",
                                "markdownDescription": "Duration in milliseconds after which to hide the notification\nautomatically.\n\n\nSee more: [Notify Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/notify) "
                            },
                            "variant": {
                                "type": "string",
                                "default": "default",
                                "description": "The alert variant will impact the color and signals different stages\nof urgency or importance.\n",
                                "enum": [
                                    "default",
                                    "error",
                                    "info",
                                    "success",
                                    "warning"
                                ],
                                "markdownDescription": "The alert variant will impact the color and signals different stages\nof urgency or importance.\n\n\nSee more: [Notify Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/notify) "
                            }
                        }
                    },
                    "markdownDescription": "Options to an Notify action. In contrast to an alert the notification does\nnot interrupt the execution of a workflow and requires no user interaction.\nIt will only be shown to users that have the workflow open at the time of\nthe action being run.\n\n\nSee more: [Notify Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/notify) "
                },
                "repeatSubstep": {
                    "type": "object",
                    "title": "RepeatSubstep Options",
                    "description": "Options to an RepeatSubstep action.\n",
                    "propertyNames": {
                        "enum": [
                            "repeat_substep",
                            "REPEAT_SUBSTEP",
                            "RepeatSubstep"
                        ]
                    },
                    "additionalProperties": {
                        "type": "object",
                        "properties": {
                            "substep": {
                                "type": "integer",
                                "description": "Index of the substep from which on the step should be repeated. Substeps\nare always indexed form 0. So to passing `substep: 0`, would repeat the\nentire step.\n\nIf no option is passed the index is taken from the trigger, e.g. a\nSubstepComplete trigger will repeat the just completed substep.\n",
                                "markdownDescription": "Index of the substep from which on the step should be repeated. Substeps\nare always indexed form 0. So to passing `substep: 0`, would repeat the\nentire step.\n\nIf no option is passed the index is taken from the trigger, e.g. a\nSubstepComplete trigger will repeat the just completed substep.\n\n\nSee more: [Repeat Substep Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/repeatSubstep) "
                            }
                        }
                    },
                    "markdownDescription": "Options to an RepeatSubstep action.\n\n\nSee more: [Repeat Substep Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/repeatSubstep) "
                },
                "resetTimer": {
                    "type": "object",
                    "title": "ResetTimer Options",
                    "description": "Options to an ResetTimer action.\n",
                    "propertyNames": {
                        "enum": [
                            "reset_timer",
                            "RESET_TIMER",
                            "ResetTimer"
                        ]
                    },
                    "additionalProperties": {
                        "type": "object",
                        "properties": {
                            "identifier": {
                                "type": "string",
                                "description": "Identifier of a timer.\n",
                                "markdownDescription": "Identifier of a timer.\n\n\nSee more: [Reset Timer Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/resetTimer) "
                            }
                        }
                    },
                    "markdownDescription": "Options to an ResetTimer action.\n\n\nSee more: [Reset Timer Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/resetTimer) "
                },
                "selectCell": {
                    "type": "object",
                    "title": "SelectCell Options",
                    "description": "Options to a SelectCell action.\n",
                    "propertyNames": {
                        "enum": [
                            "select_cell",
                            "SELECT_CELL"
                        ]
                    },
                    "additionalProperties": {
                        "type": "object",
                        "required": [
                            "table",
                            "value"
                        ],
                        "properties": {
                            "table": {
                                "$ref": "#/definitions/memberName",
                                "description": "Identifier of the table",
                                "markdownDescription": "Identifier of the table\n\nSee more: [Select Cell Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/selectCell) "
                            },
                            "value": {
                                "$ref": "#/definitions/script",
                                "description": "Set the selected cell based on calculated value from signal and fields.\n\nFor example, if the signal come with the following structure:\n\n  {\n    'identifier' => 'myTable',\n    'data' => { 'pointer' => '/1/density' }\n  }\n\nYou can set the selected cell to the row on index 1 of column 'density' by\nsetting this property to 'data.pointer'.\n\nFor the selection to work, the calculated value must resolve to a json pointer\nin the format of /[row-0-based-index]/[column-key]\n\nTo unset the selection, the calculated value must resolve to 'null'.\n",
                                "markdownDescription": "Set the selected cell based on calculated value from signal and fields.\n\nFor example, if the signal come with the following structure:\n\n  {\n    'identifier' => 'myTable',\n    'data' => { 'pointer' => '/1/density' }\n  }\n\nYou can set the selected cell to the row on index 1 of column 'density' by\nsetting this property to 'data.pointer'.\n\nFor the selection to work, the calculated value must resolve to a json pointer\nin the format of /[row-0-based-index]/[column-key]\n\nTo unset the selection, the calculated value must resolve to 'null'.\n\n\nSee more: [Select Cell Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/selectCell) "
                            }
                        }
                    },
                    "markdownDescription": "Options to a SelectCell action.\n\n\nSee more: [Select Cell Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/selectCell) "
                },
                "selectRow": {
                    "type": "object",
                    "title": "SelectRow Options",
                    "description": "Options to a SelectRow action\n",
                    "propertyNames": {
                        "enum": [
                            "select_row",
                            "SELECT_ROW"
                        ]
                    },
                    "additionalProperties": {
                        "type": "object",
                        "required": [
                            "table",
                            "value"
                        ],
                        "properties": {
                            "table": {
                                "$ref": "#/definitions/memberName",
                                "description": "Identifier of the table",
                                "markdownDescription": "Identifier of the table\n\nSee more: [Select Row Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/selectRow) "
                            },
                            "value": {
                                "$ref": "#/definitions/script",
                                "description": "Set the selected row based on calculated value from signal and fields.\n\nFor example, if the signal come with the following structure:\n\n  {\n    'identifier' => 'myTable',\n    'data' => { 'pointer' => '/1' }\n  }\n\nYou can set the row on index 1 (the second row on the table) to be selected by\nsetting this property to 'data.pointer'.\n\nFor the selection to work, the calculated value must resolve to a json pointer\nin the format of /[row-0-based-index]\n\nTo unset the selection, the calculated value must resolve to 'null'.\n",
                                "markdownDescription": "Set the selected row based on calculated value from signal and fields.\n\nFor example, if the signal come with the following structure:\n\n  {\n    'identifier' => 'myTable',\n    'data' => { 'pointer' => '/1' }\n  }\n\nYou can set the row on index 1 (the second row on the table) to be selected by\nsetting this property to 'data.pointer'.\n\nFor the selection to work, the calculated value must resolve to a json pointer\nin the format of /[row-0-based-index]\n\nTo unset the selection, the calculated value must resolve to 'null'.\n\n\nSee more: [Select Row Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/selectRow) "
                            }
                        }
                    },
                    "markdownDescription": "Options to a SelectRow action\n\n\nSee more: [Select Row Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/selectRow) "
                },
                "sendCommand": {
                    "type": "object",
                    "title": "SendCommand Options",
                    "description": "Options to a SendCommand action.\n",
                    "propertyNames": {
                        "enum": [
                            "SendCommand",
                            "send_command",
                            "SEND_COMMAND"
                        ]
                    },
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": true,
                        "required": [
                            "device",
                            "command"
                        ],
                        "properties": {
                            "device": {
                                "$ref": "#/definitions/memberName",
                                "description": "A reference to a field that is a relationship to a device.\n",
                                "markdownDescription": "A reference to a field that is a relationship to a device.\n\n\nSee more: [Send Command Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/sendCommand) "
                            },
                            "command": {
                                "type": "string",
                                "description": "The command to execute. Available commands are device\nspecific.\n",
                                "markdownDescription": "The command to execute. Available commands are device\nspecific.\n\n\nSee more: [Send Command Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/sendCommand) "
                            }
                        }
                    },
                    "markdownDescription": "Options to a SendCommand action.\n\n\nSee more: [Send Command Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/sendCommand) "
                },
                "setField": {
                    "type": "object",
                    "title": "Set Field",
                    "description": "A Set Field action updates a field with a new value.\n",
                    "propertyNames": {
                        "enum": [
                            "set_field",
                            "SET_FIELD",
                            "SetField"
                        ]
                    },
                    "additionalProperties": {
                        "oneOf": [
                            {
                                "type": "object",
                                "required": [
                                    "field",
                                    "value"
                                ],
                                "additionalProperties": false,
                                "properties": {
                                    "field": {
                                        "$ref": "#/definitions/memberName",
                                        "description": "A reference to a field that is updated with a value when the action is triggered.\n",
                                        "markdownDescription": "A reference to a field that is updated with a value when the action is triggered.\n\n\nSee more: [Set Field Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/setField) "
                                    },
                                    "value": {
                                        "$ref": "#/definitions/script",
                                        "description": "A script that returns a value. The value type must match the type of the field that is referenced in the `field` setting. Different fields allow for different logical and arithmetical operations.\n",
                                        "markdownDescription": "A script that returns a value. The value type must match the type of the field that is referenced in the `field` setting. Different fields allow for different logical and arithmetical operations.\n\n\nSee more: [Set Field Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/setField) "
                                    },
                                    "meta": {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                            "reason": {
                                                "description": "A reason that is recorded along with a field update if the update requires a reason. See [Change Reason schema](/schemas/definitions/workflow_template/changeReason/) for more information.\n",
                                                "type": "string",
                                                "markdownDescription": "A reason that is recorded along with a field update if the update requires a reason. See [Change Reason schema](https://schema.laboperator.com/schemas/definitions/workflow_template/changeReason/) for more information.\n\n\nSee more: [Set Field Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/setField) "
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "type": "object",
                                "required": [
                                    "field",
                                    "patch"
                                ],
                                "additionalProperties": false,
                                "properties": {
                                    "field": {
                                        "$ref": "#/definitions/memberName",
                                        "description": "A reference to a field that is partially updated with a value when the action is triggered.\n",
                                        "markdownDescription": "A reference to a field that is partially updated with a value when the action is triggered.\n\n\nSee more: [Set Field Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/setField) "
                                    },
                                    "patch": {
                                        "type": "array",
                                        "description": "An array of JSON patch operations to be performed. The JSON Patch format can be used to avoid sending a whole document when only a part has changed. You can find more details at [jsonpatch.com](http://jsonpatch.com/).\n",
                                        "items": {
                                            "type": "object",
                                            "required": [
                                                "path",
                                                "op"
                                            ],
                                            "properties": {
                                                "path": {
                                                    "$ref": "#/definitions/script",
                                                    "description": "A script that returns the pointer to the part of a field document that will be updated. The path is resolved relative to the field's value.\n",
                                                    "markdownDescription": "A script that returns the pointer to the part of a field document that will be updated. The path is resolved relative to the field's value.\n\n\nSee more: [Set Field Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/setField) "
                                                },
                                                "op": {
                                                    "type": "string",
                                                    "enum": [
                                                        "add",
                                                        "remove",
                                                        "replace",
                                                        "copy",
                                                        "move",
                                                        "test"
                                                    ],
                                                    "description": "Operation to be performed as defined by [the specification](http://jsonpatch.com/#operations).\n",
                                                    "markdownDescription": "Operation to be performed as defined by [the specification](http://jsonpatch.com/#operations).\n\n\nSee more: [Set Field Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/setField) "
                                                },
                                                "value": {
                                                    "$ref": "#/definitions/script",
                                                    "description": "A script that returns a value. The value type must match the type of the field that is referenced in the `field` setting. Different fields allow for different logical and arithmetical operations.\n",
                                                    "markdownDescription": "A script that returns a value. The value type must match the type of the field that is referenced in the `field` setting. Different fields allow for different logical and arithmetical operations.\n\n\nSee more: [Set Field Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/setField) "
                                                },
                                                "from": {
                                                    "$ref": "#/definitions/script",
                                                    "description": "A script that returns the pointer to the part of a field document that is copied or moved. The path is resolved relative to the field's value.\n",
                                                    "markdownDescription": "A script that returns the pointer to the part of a field document that is copied or moved. The path is resolved relative to the field's value.\n\n\nSee more: [Set Field Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/setField) "
                                                }
                                            }
                                        },
                                        "markdownDescription": "An array of JSON patch operations to be performed. The JSON Patch format can be used to avoid sending a whole document when only a part has changed. You can find more details at [jsonpatch.com](http://jsonpatch.com/).\n\n\nSee more: [Set Field Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/setField) "
                                    },
                                    "meta": {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                            "reason": {
                                                "description": "A reason that is recorded along with a field update if the update requires a reason. See [Change Reason schema](/schemas/definitions/workflow_template/changeReason/) for more information.\n",
                                                "type": "string",
                                                "markdownDescription": "A reason that is recorded along with a field update if the update requires a reason. See [Change Reason schema](https://schema.laboperator.com/schemas/definitions/workflow_template/changeReason/) for more information.\n\n\nSee more: [Set Field Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/setField) "
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "examples": [
                        {
                            "set_field": {
                                "field": "resultField",
                                "value": "data_point.value",
                                "meta": {
                                    "reason": "Field update via incoming data point from device weight channel"
                                }
                            }
                        },
                        {
                            "set_field": {
                                "field": "myTableData",
                                "patch": [
                                    {
                                        "path": "'/0/molar_mass'",
                                        "value": 200,
                                        "op": "replace"
                                    },
                                    {
                                        "path": "'/0/final_density'",
                                        "value": "myDensity * 3",
                                        "op": "replace"
                                    },
                                    {
                                        "path": "myField.myPointer",
                                        "value": {
                                            "targetValue": 100,
                                            "experimentId": "abc123"
                                        },
                                        "op": "replace"
                                    },
                                    {
                                        "path": "'/-'",
                                        "value": {
                                            "density": "2 mg/ul",
                                            "molar_mass": 100,
                                            "type_here": "it works"
                                        },
                                        "op": "add"
                                    },
                                    {
                                        "path": "'/0'",
                                        "value": null,
                                        "op": "remove"
                                    }
                                ]
                            }
                        }
                    ],
                    "markdownDescription": "A Set Field action updates a field with a new value.\n\n\nSee more: [Set Field Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/setField) "
                },
                "setTemporaryField": {
                    "type": "object",
                    "title": "Set Temporary Field",
                    "description": "An action to store temporary value which last for a single chain of actions.\n",
                    "propertyNames": {
                        "enum": [
                            "set_temporary_field",
                            "SET_TEMPORARY_FIELD",
                            "SetTemporaryField"
                        ]
                    },
                    "additionalProperties": {
                        "type": "object",
                        "required": [
                            "field",
                            "value"
                        ],
                        "additionalProperties": false,
                        "properties": {
                            "field": {
                                "$ref": "#/definitions/memberName",
                                "description": "Name of the temporary field which will be assigned with value when the action is triggered.\n",
                                "markdownDescription": "Name of the temporary field which will be assigned with value when the action is triggered.\n\n\nSee more: [Set Temporary Field Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/setTemporaryField) "
                            },
                            "value": {
                                "$ref": "#/definitions/script",
                                "description": "A script that returns the value for the temporary field.\n",
                                "markdownDescription": "A script that returns the value for the temporary field.\n\n\nSee more: [Set Temporary Field Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/setTemporaryField) "
                            }
                        }
                    },
                    "examples": [
                        {
                            "set_temporary_field": {
                                "field": "authenticationToken",
                                "value": "response.body.authentication_token"
                            }
                        },
                        {
                            "SetTemporaryField": {
                                "field": "average",
                                "value": "AVG(MAP(data, item, item.value))"
                            }
                        }
                    ],
                    "markdownDescription": "An action to store temporary value which last for a single chain of actions.\n\n\nSee more: [Set Temporary Field Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/setTemporaryField) "
                },
                "startTimer": {
                    "type": "object",
                    "title": "StartTimer Options",
                    "description": "Options to a StartTimer action.\n",
                    "propertyNames": {
                        "enum": [
                            "start_timer",
                            "START_TIMER",
                            "StartTimer"
                        ]
                    },
                    "additionalProperties": {
                        "type": "object",
                        "properties": {
                            "identifier": {
                                "type": "string",
                                "description": "Identifier of a timer.\n",
                                "markdownDescription": "Identifier of a timer.\n\n\nSee more: [Start Timer Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/startTimer) "
                            }
                        }
                    },
                    "markdownDescription": "Options to a StartTimer action.\n\n\nSee more: [Start Timer Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/startTimer) "
                },
                "stopTimer": {
                    "type": "object",
                    "title": "StopTimer Options",
                    "description": "Options to an StopTimer action.\n",
                    "propertyNames": {
                        "enum": [
                            "stop_timer",
                            "STOP_TIMER",
                            "StopTimer"
                        ]
                    },
                    "additionalProperties": {
                        "type": "object",
                        "properties": {
                            "identifier": {
                                "type": "string",
                                "description": "Identifier of a timer.\n",
                                "markdownDescription": "Identifier of a timer.\n\n\nSee more: [Stop Timer Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/stopTimer) "
                            }
                        }
                    },
                    "markdownDescription": "Options to an StopTimer action.\n\n\nSee more: [Stop Timer Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/stopTimer) "
                },
                "updateResource": {
                    "type": "object",
                    "title": "Update Resource",
                    "description": "An action to update a resource. It can be used to update the value of custom attributes, and in case of Workflow Runs also update their title.\n",
                    "propertyNames": {
                        "enum": [
                            "update_resource",
                            "UPDATE_RESOURCE",
                            "UpdateResource"
                        ]
                    },
                    "additionalProperties": {
                        "allOf": [
                            {
                                "type": "object",
                                "required": [
                                    "id"
                                ],
                                "properties": {
                                    "id": {
                                        "$ref": "#/definitions/script",
                                        "description": "A script that must resolve to the `id` of the resource to be updated.\n",
                                        "examples": [
                                            "workflow_run.data.id",
                                            "deviceField.id"
                                        ],
                                        "markdownDescription": "A script that must resolve to the `id` of the resource to be updated.\n\n\nSee more: [Update Resource Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/update-resource) "
                                    }
                                }
                            },
                            {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "required": [
                                            "type",
                                            "attributes"
                                        ],
                                        "properties": {
                                            "type": {
                                                "type": "string",
                                                "enum": [
                                                    "workflow_run"
                                                ]
                                            },
                                            "attributes": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                    "custom_attributes": {
                                                        "$ref": "#/definitions/script",
                                                        "description": "To update a custom attribute, the script must resolve to a hash object with `name`, `type` and `value` attributes. The supported custom attribute data types are `number`, `text`, `boolean` (checkbox), `date`, `datetime`, `file`, `image`, `physicalQuantity`, `relation`, and `duration`.\n",
                                                        "markdownDescription": "To update a custom attribute, the script must resolve to a hash object with `name`, `type` and `value` attributes. The supported custom attribute data types are `number`, `text`, `boolean` (checkbox), `date`, `datetime`, `file`, `image`, `physicalQuantity`, `relation`, and `duration`.\n\n\nSee more: [Update Resource Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/update-resource) "
                                                    },
                                                    "title": {
                                                        "$ref": "#/definitions/script"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "required": [
                                            "type",
                                            "attributes"
                                        ],
                                        "properties": {
                                            "type": {
                                                "type": "string",
                                                "enum": [
                                                    "collection",
                                                    "connector",
                                                    "dashboard",
                                                    "device",
                                                    "export",
                                                    "measurement",
                                                    "sample",
                                                    "workflow_step_template",
                                                    "workflow_template"
                                                ]
                                            },
                                            "attributes": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                    "custom_attributes": {
                                                        "$ref": "#/definitions/script",
                                                        "description": "To update a custom attribute, the script must evaluate to a hash object with `name`, `type` and `value` attributes. The supported custom attribute data types are `number`, `text`, `boolean` (checkbox), `date`, `datetime`, `file`, `image`, `physicalQuantity`, `relation`, and `duration`.\n",
                                                        "markdownDescription": "To update a custom attribute, the script must evaluate to a hash object with `name`, `type` and `value` attributes. The supported custom attribute data types are `number`, `text`, `boolean` (checkbox), `date`, `datetime`, `file`, `image`, `physicalQuantity`, `relation`, and `duration`.\n\n\nSee more: [Update Resource Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/update-resource) "
                                                    }
                                                }
                                            }
                                        }
                                    }
                                ]
                            }
                        ]
                    },
                    "examples": [
                        {
                            "update_resource": {
                                "id": "workflow_run.data.id",
                                "type": "workflow_run",
                                "attributes": {
                                    "title": "sampleField.name"
                                }
                            }
                        },
                        {
                            "update_resource": {
                                "id": "balance.id",
                                "type": "device",
                                "attributes": {
                                    "custom_attributes": "{\n  HASH(\n    \"name\",\"DeviceInUse\",\n    \"type\", \"boolean\",\n    \"value\", true\n  ),\n  HASH(\n    \"name\",\"WorkflowID\",\n    \"type\", \"string\",\n    \"value\", workflow_run.data.id\n  )\n}\n"
                                }
                            }
                        }
                    ],
                    "markdownDescription": "An action to update a resource. It can be used to update the value of custom attributes, and in case of Workflow Runs also update their title.\n\n\nSee more: [Update Resource Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/update-resource) "
                },
                "webhook": {
                    "type": "object",
                    "title": "Webhook Actions",
                    "description": "Options to set a webhook action\n",
                    "propertyNames": {
                        "enum": [
                            "webhook",
                            "Webhook",
                            "WEBHOOK"
                        ]
                    },
                    "additionalProperties": {
                        "type": "object",
                        "required": [
                            "url"
                        ],
                        "properties": {
                            "url": {
                                "type": "string",
                                "description": "The URL that should be used in the webhook.\n",
                                "markdownDescription": "The URL that should be used in the webhook.\n\n\nSee more: [Webhook Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/webhook) "
                            },
                            "interceptors": {
                                "type": "array",
                                "description": "interceptors to be applied to the request",
                                "items": {
                                    "oneOf": [
                                        {
                                            "type": "object",
                                            "additionalProperties": false,
                                            "properties": {
                                                "s3": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                        "secret_key": {
                                                            "type": "string"
                                                        },
                                                        "access_key": {
                                                            "type": "string"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                },
                                "markdownDescription": "interceptors to be applied to the request\n\nSee more: [Webhook Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/webhook) "
                            },
                            "headers": {
                                "type": "object",
                                "description": "The HTTP request headers\n",
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "markdownDescription": "The HTTP request headers\n\n\nSee more: [Webhook Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/webhook) "
                            },
                            "method": {
                                "type": "string",
                                "enum": [
                                    "get",
                                    "put",
                                    "patch",
                                    "delete",
                                    "post",
                                    "head"
                                ],
                                "description": "The HTTP verb that will be used in the request\n",
                                "default": "post",
                                "markdownDescription": "The HTTP verb that will be used in the request\n\n\nSee more: [Webhook Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/webhook) "
                            },
                            "blocking": {
                                "type": "boolean",
                                "description": "Defines if the webhook action will block the subsequent steps\n",
                                "default": false,
                                "markdownDescription": "Defines if the webhook action will block the subsequent steps\n\n\nSee more: [Webhook Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/webhook) "
                            },
                            "body": {
                                "type": "string",
                                "description": "The HTTP request body. You can add information about fields present in the workflow,\nand non-field information as well, using {{myInformation}}.\nBesides field identifiers, the following references are supported:\n  - workflow_step: The current step of the workflow.\n    Please refer to the API documentation for the keys available to use.\n  - workflow_run: The current workflow run.\n    Please refer to the API documentation for the keys available to use.\n  - signal: details of what triggered the action.\n    includes but not limited to:\n\n      - type: What triggered the action, e.g. StepStart, Manual, etc\n      - auth_token: Encoded reference to the active user access_tokens (applicable only in a SSO environment),\n        may be blank if the active user can not be determined\n      - pointer: Returns the pointer to the behavior that called the webhook\n        (reference to the path inside the workflow template being used).\n\n  - options: The options being used for the webhook action, i.e. URL, headers, handlers.\n",
                                "examples": [
                                    "reference to a workflow field named 'volumeField' with a value of '10ml':\n{\n  \"registered_value\": {{volumeField}}\n}\nThe example above will generate a request with the following body:\n{\n  \"registered_value\": \"10ml\"\n}\n",
                                    "reference to non-field information:\n{\n  \"stepPointer\": {{workflow_step.pointer}}\n}\nThe example above will generate a request with the following body:\n{\n  \"stepPointer\": \"/steps/externalStep\"\n}\n"
                                ],
                                "markdownDescription": "The HTTP request body. You can add information about fields present in the workflow,\nand non-field information as well, using {{myInformation}}.\nBesides field identifiers, the following references are supported:\n  - workflow_step: The current step of the workflow.\n    Please refer to the API documentation for the keys available to use.\n  - workflow_run: The current workflow run.\n    Please refer to the API documentation for the keys available to use.\n  - signal: details of what triggered the action.\n    includes but not limited to:\n\n      - type: What triggered the action, e.g. StepStart, Manual, etc\n      - auth_token: Encoded reference to the active user access_tokens (applicable only in a SSO environment),\n        may be blank if the active user can not be determined\n      - pointer: Returns the pointer to the behavior that called the webhook\n        (reference to the path inside the workflow template being used).\n\n  - options: The options being used for the webhook action, i.e. URL, headers, handlers.\n\n\nSee more: [Webhook Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/webhook) "
                            },
                            "onSuccess": {
                                "description": "The handler for response status codes 2xx",
                                "$ref": "#/definitions/step/webhookHandler",
                                "markdownDescription": "The handler for response status codes 2xx\n\nSee more: [Webhook Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/webhook) "
                            },
                            "onError": {
                                "description": "The handler for response status codes 5xx",
                                "$ref": "#/definitions/step/webhookHandler",
                                "markdownDescription": "The handler for response status codes 5xx\n\nSee more: [Webhook Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/webhook) "
                            },
                            "onCode": {
                                "type": "object",
                                "description": "Define a different handler for specific codes.\n",
                                "propertyNames": {
                                    "$ref": "#/definitions/statusCode"
                                },
                                "additionalProperties": {
                                    "$ref": "#/definitions/step/webhookHandler"
                                },
                                "markdownDescription": "Define a different handler for specific codes.\n\n\nSee more: [Webhook Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/webhook) "
                            }
                        }
                    },
                    "markdownDescription": "Options to set a webhook action\n\n\nSee more: [Webhook Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/action_objects/webhook) "
                }
            },
            "trigger_objects": {
                "commandResponse": {
                    "type": "object",
                    "title": "CommandResponse Options",
                    "description": "Options to a CommandResponse trigger.\n",
                    "propertyNames": {
                        "enum": [
                            "CommandResponse",
                            "command_response",
                            "COMMAND_RESPONSE",
                            "OnCommandResponse",
                            "on_command_response",
                            "ON_COMMAND_RESPONSE"
                        ]
                    },
                    "additionalProperties": {
                        "type": "object",
                        "required": [
                            "device"
                        ],
                        "properties": {
                            "device": {
                                "$ref": "#/definitions/memberName",
                                "description": "A reference to a field that is a relationship to a device.\n",
                                "markdownDescription": "A reference to a field that is a relationship to a device.\n\n\nSee more: [Command Response Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/trigger_objects/commandResponse) "
                            },
                            "command": {
                                "type": "string",
                                "description": "Restricts the trigger to specific commands, e.g. only trigger on a\n`get_weight` response not on a response to `get_temperature`.\n",
                                "examples": [
                                    "get_weight"
                                ],
                                "markdownDescription": "Restricts the trigger to specific commands, e.g. only trigger on a\n`get_weight` response not on a response to `get_temperature`.\n\n\nSee more: [Command Response Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/trigger_objects/commandResponse) "
                            },
                            "status": {
                                "type": "string",
                                "description": "Restricts the trigger to specific status of the response, e.g. only\ntrigger once a command is `confirmed` or `completed`. Note that\nyou also have access to that information in the conditions.\n",
                                "examples": [
                                    "completed"
                                ],
                                "markdownDescription": "Restricts the trigger to specific status of the response, e.g. only\ntrigger once a command is `confirmed` or `completed`. Note that\nyou also have access to that information in the conditions.\n\n\nSee more: [Command Response Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/trigger_objects/commandResponse) "
                            }
                        }
                    },
                    "markdownDescription": "Options to a CommandResponse trigger.\n\n\nSee more: [Command Response Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/trigger_objects/commandResponse) "
                },
                "dataPoint": {
                    "type": "object",
                    "title": "DataPoint Options",
                    "description": "Options to a DataPoint trigger.\n",
                    "propertyNames": {
                        "enum": [
                            "DataPoint",
                            "data_point",
                            "DATA_POINT",
                            "OnDataPoint",
                            "on_data_point",
                            "ON_DATA_POINT"
                        ]
                    },
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": true,
                        "required": [
                            "device",
                            "channel"
                        ],
                        "properties": {
                            "device": {
                                "$ref": "#/definitions/memberName",
                                "description": "A reference to a field that is a relationship to a device.\n",
                                "markdownDescription": "A reference to a field that is a relationship to a device.\n\n\nSee more: [Data Point Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/trigger_objects/dataPoint) "
                            },
                            "channel": {
                                "type": "string",
                                "description": "Name of the channel that should be subscribed.\n",
                                "examples": [
                                    "weight"
                                ],
                                "markdownDescription": "Name of the channel that should be subscribed.\n\n\nSee more: [Data Point Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/trigger_objects/dataPoint) "
                            }
                        }
                    },
                    "markdownDescription": "Options to a DataPoint trigger.\n\n\nSee more: [Data Point Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/trigger_objects/dataPoint) "
                },
                "fieldUpdate": {
                    "type": "object",
                    "title": "FieldUpdate Options",
                    "description": "Options to a FieldUpdate trigger.\n",
                    "propertyNames": {
                        "enum": [
                            "FieldUpdate",
                            "field_update",
                            "FIELD_UPDATE",
                            "OnFieldUpdate",
                            "on_field_update",
                            "ON_FIELD_UPDATE"
                        ]
                    },
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": true,
                        "required": [
                            "field"
                        ],
                        "properties": {
                            "field": {
                                "$ref": "#/definitions/memberName",
                                "description": "A field identifier. Only updates to this field will fire the trigger.\n",
                                "markdownDescription": "A field identifier. Only updates to this field will fire the trigger.\n\n\nSee more: [Field Update Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/trigger_objects/fieldUpdate) "
                            }
                        }
                    },
                    "markdownDescription": "Options to a FieldUpdate trigger.\n\n\nSee more: [Field Update Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/trigger_objects/fieldUpdate) "
                },
                "manual": {
                    "type": "object",
                    "title": "Manual Options",
                    "description": "Options to a Manual trigger.\n",
                    "propertyNames": {
                        "enum": [
                            "Manual",
                            "manual",
                            "MANUAL",
                            "OnManual",
                            "on_manual",
                            "ON_MANUAL"
                        ]
                    },
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": true,
                        "required": [
                            "key"
                        ],
                        "properties": {
                            "key": {
                                "$ref": "#/definitions/memberName",
                                "description": "A key passed that is used to filter to react to a\nbutton being assigned the same key.\n",
                                "markdownDescription": "A key passed that is used to filter to react to a\nbutton being assigned the same key.\n\n\nSee more: [Manual Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/trigger_objects/manual) "
                            }
                        }
                    },
                    "markdownDescription": "Options to a Manual trigger.\n\n\nSee more: [Manual Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/trigger_objects/manual) "
                },
                "scan": {
                    "type": "object",
                    "title": "Scan Options",
                    "description": "Options for a Scanner trigger. The application supports simulating a barcode scan by passing the 'simulateScanString' prop to the component.\n",
                    "propertyNames": {
                        "enum": [
                            "scan",
                            "SCAN",
                            "on_scan",
                            "ON_SCAN"
                        ]
                    },
                    "additionalProperties": {
                        "type": "object",
                        "required": [
                            "pattern"
                        ],
                        "properties": {
                            "pattern": {
                                "type": "string",
                                "format": "regex",
                                "description": "The pattern will be matched with text to determine a valid barcode scan.\n",
                                "examples": [
                                    "^ID-[-A-Z0-9]"
                                ],
                                "default": "^[-A-Z0-9]{4,}",
                                "markdownDescription": "The pattern will be matched with text to determine a valid barcode scan.\n\n\nSee more: [Scan Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/trigger_objects/scan) "
                            },
                            "caseSensitive": {
                                "type": "boolean",
                                "description": "Determines whether the search for a match is case-sensitive.\n",
                                "default": false,
                                "markdownDescription": "Determines whether the search for a match is case-sensitive.\n\n\nSee more: [Scan Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/trigger_objects/scan) "
                            }
                        }
                    },
                    "markdownDescription": "Options for a Scanner trigger. The application supports simulating a barcode scan by passing the 'simulateScanString' prop to the component.\n\n\nSee more: [Scan Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/trigger_objects/scan) "
                },
                "timerComplete": {
                    "type": "object",
                    "title": "Timer Complete Options",
                    "description": "Options to a Timer Complete trigger.\n",
                    "propertyNames": {
                        "enum": [
                            "ON_TIMER_COMPLETE",
                            "on_timer_complete",
                            "TIMER_COMPLETE",
                            "timer_complete"
                        ]
                    },
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": true,
                        "required": [
                            "identifier"
                        ],
                        "properties": {
                            "identifier": {
                                "$ref": "#/definitions/memberName",
                                "description": "Identifier of a timer that initiates the trigger.\n",
                                "markdownDescription": "Identifier of a timer that initiates the trigger.\n\n\nSee more: [Timer Complete Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/trigger_objects/timerComplete) "
                            }
                        }
                    },
                    "markdownDescription": "Options to a Timer Complete trigger.\n\n\nSee more: [Timer Complete Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/trigger_objects/timerComplete) "
                },
                "timerReset": {
                    "type": "object",
                    "title": "Timer Reset Options",
                    "description": "Options to a Timer Reset trigger.\n",
                    "propertyNames": {
                        "enum": [
                            "ON_TIMER_RESET",
                            "on_timer_reset",
                            "TIMER_RESET",
                            "timer_reset"
                        ]
                    },
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": true,
                        "required": [
                            "identifier"
                        ],
                        "properties": {
                            "identifier": {
                                "$ref": "#/definitions/memberName",
                                "description": "Identifier of a timer that initiates the trigger.\n",
                                "markdownDescription": "Identifier of a timer that initiates the trigger.\n\n\nSee more: [Timer Reset Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/trigger_objects/timerReset) "
                            }
                        }
                    },
                    "markdownDescription": "Options to a Timer Reset trigger.\n\n\nSee more: [Timer Reset Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/trigger_objects/timerReset) "
                },
                "timerStart": {
                    "type": "object",
                    "title": "Timer Start Options",
                    "description": "Options to a Timer Start trigger.\n",
                    "propertyNames": {
                        "enum": [
                            "ON_TIMER_START",
                            "on_timer_start",
                            "TIMER_START",
                            "timer_start"
                        ]
                    },
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": true,
                        "required": [
                            "identifier"
                        ],
                        "properties": {
                            "identifier": {
                                "$ref": "#/definitions/memberName",
                                "description": "Identifier of a timer that initiates the trigger.\n",
                                "markdownDescription": "Identifier of a timer that initiates the trigger.\n\n\nSee more: [Timer Start Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/trigger_objects/timerStart) "
                            }
                        }
                    },
                    "markdownDescription": "Options to a Timer Start trigger.\n\n\nSee more: [Timer Start Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/trigger_objects/timerStart) "
                },
                "timerStop": {
                    "type": "object",
                    "title": "Timer Complete Options",
                    "description": "Options to a Timer Complete trigger.\n",
                    "propertyNames": {
                        "enum": [
                            "ON_TIMER_STOP",
                            "on_timer_stop",
                            "TIMER_STOP",
                            "timer_stop"
                        ]
                    },
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": true,
                        "required": [
                            "identifier"
                        ],
                        "properties": {
                            "identifier": {
                                "$ref": "#/definitions/memberName",
                                "description": "Identifier of a timer that initiates the trigger.\n",
                                "markdownDescription": "Identifier of a timer that initiates the trigger.\n\n\nSee more: [Timer Stop Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/trigger_objects/timerStop) "
                            }
                        }
                    },
                    "markdownDescription": "Options to a Timer Complete trigger.\n\n\nSee more: [Timer Stop Schema](https://schema.laboperator.com/schemas/definitions/workflow_template/trigger_objects/timerStop) "
                }
            }
        }
    }
}
